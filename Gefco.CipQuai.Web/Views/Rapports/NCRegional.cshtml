@using Microsoft.Ajax.Utilities
@model Gefco.CipQuai.Web.Views.NCRegionalStatViewModel
@{
    ViewBag.PageIcon = "feather icon-home";
    ViewBag.Title = "Rapport Régional - Non conformités émises";
    ViewBag.ShowHeader = false;
    Layout = "~/Views/Shared/_AuthLayout.cshtml";

    var nc1 = Tools.GenerateRandomString(8);
    var nc2 = Tools.GenerateRandomString(8);
    var nc3 = Tools.GenerateRandomString(8);
}

<script src="~/Content/assets/amcharts/core.js"></script>
<script src="~/Content/assets/amcharts/charts.js"></script>
<script src="~/Content/assets/amcharts/animated.js"></script>

<script>
    am4core.useTheme(am4themes_animated);
</script>

<div class="row dashboard">
    @{
        Html.RenderPartial("Filters", Model, new ViewDataDictionary
                {
                    {"Title", @ViewBag.Title}
                });
    }
    <div class="col-xl-12 col-md-12 px-1 px-sm-3">
        <div class="card product-progress-card">
            <div class="card-block p-0">
                <div class="pp-main row m-0">
                    <div class="col-12 px-0">
                        <div class="pp-cont">
                            <div class="w-100">
                                <div class="card sale-card">
                                    <div class="card-header">
                                        <h4>NC / Semaine</h4>
                                    </div>
                                    <div class="card-block">
                                        <div id="@nc1" style="height: 65vh"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 px-0">
                        <div class="pp-cont">
                            <div class="w-100">
                                <div class="card sale-card">
                                    <div class="card-header">
                                        <h4>NC / Agence</h4>
                                    </div>
                                    <div class="card-block">
                                        <div id="@nc2" style="height: 65vh"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 px-0">
                        <div class="pp-cont">
                            <div class="w-100">
                                <div class="card sale-card">
                                    <div class="card-header">
                                        <h4>Suivi de l'agence tête de pareto : @ViewBag.TopAgence</h4>
                                    </div>
                                    <div class="card-block">
                                        <div id="@nc3" style="height: 65vh"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts
{

    <script>
        $(function() {
            $("#menu-rapport-regional").addClass("pcoded-trigger active").find(".pcoded-submenu.main").show()
                .find("#menu-rapport-regional-@Model.Id").addClass("pcoded-trigger active").find(".pcoded-submenu")
                .show().find("#menu-rapport-regional-nc-@Model.Id").addClass("active");
        });

        var @nc2, @nc1, @nc3;

        function savePDF(type) {
            Promise.all([
                @(nc1).exporting.pdfmake,
                @(nc1).exporting.getImage("png"),
                @(nc2).exporting.getImage("png"),
                @(nc3).exporting.getImage("png")
            ]).then(function(res) {

                const pdfMake = res[0];

                // pdfmake is ready
                // Create document template
                const doc = {
                    pageSize: "A4",
                    pageOrientation: "landscape",
                    pageMargins: [30, 30, 30, 30],
                    content: []
                };

                doc.content.push({
                    text: "GEFCO CIP Quai",
                    fontSize: 20,
                    bold: true,
                    margin: [0, -10, 0, 0]
                });
                doc.content.push({
                    text: "Région @ViewBag.Region.Name du @(ViewBag.StartDate.ToString("dd/MM/yyyy")) au @(ViewBag.EndDate.ToString("dd/MM/yyyy"))",
                    fontSize: 16,
                    bold: false,
                    margin: [0, 10, 0, 30]
                });

                doc.content.push({
                    stack: [
                        {
                            text: "NC / Semaine",
                            fontSize: 14,
                            bold: true,
                            margin: [0, 5, 0, 5]
                        }, {
                            image: res[1],
                            width: 760
                        }
                    ],
                    width: "*", pageOrientation: 'landscape', pageBreak: 'after'
                });
                doc.content.push({
                    text: "GEFCO CIP Quai",
                    fontSize: 20,
                    bold: true,
                    margin: [0, -10, 0, 0]
                });
                doc.content.push({
                    text: "Région @ViewBag.Region.Name du @(ViewBag.StartDate.ToString("dd/MM/yyyy")) au @(ViewBag.EndDate.ToString("dd/MM/yyyy"))",
                    fontSize: 16,
                    bold: false,
                    margin: [0, 10, 0, 30]
                });

                doc.content.push({
                    stack: [
                        {
                            text: "NC / Agence",
                            fontSize: 14,
                            bold: true,
                            margin: [0, 5, 0, 5]
                        }, {
                            image: res[2],
                            width: 760
                        }
                    ],
                    width: "*", pageOrientation: 'landscape', pageBreak: 'after'
                });
                doc.content.push({
                    text: "GEFCO CIP Quai",
                    fontSize: 20,
                    bold: true,
                    margin: [0, -10, 0, 0]
                });
                doc.content.push({
                    text: "Région @ViewBag.Region.Name du @(ViewBag.StartDate.ToString("dd/MM/yyyy")) au @(ViewBag.EndDate.ToString("dd/MM/yyyy"))",
                    fontSize: 16,
                    bold: false,
                    margin: [0, 10, 0, 30]
                });

                doc.content.push({
                    stack: [
                        {
                            text: "Suivi de l'agence tête de pareto : @ViewBag.TopAgence",
                            fontSize: 14,
                            bold: true,
                            margin: [0, 5, 0, 5]
                        }, {
                            image: res[3],
                            width: 760
                        }
                    ],
                    width: "*"
                });

                if (type === "print")
                    pdfMake.createPdf(doc).print();
                else
                    pdfMake.createPdf(doc).download("@(DateTime.Now.ToString("yyyyMMdd-hhmmss")) - NC Régional - @(ViewBag.Region.Name).pdf");

            });
        }
        function printPDF() {
            savePDF("print");
        }

        am4core.ready(function() {

            function createSeries(chart, field, name, color) {

                // Set up series
                const series = chart.series.push(new am4charts.ColumnSeries());
                series.name = name;
                series.dataFields.valueY = field;
                series.dataFields.categoryX = "CategoryName";
                series.sequencedInterpolation = true;
                series.fill = am4core.color(color);
                series.stroke = am4core.color(color);

                // Make it stacked
                series.stacked = true;

                // Configure columns
                series.columns.template.width = am4core.percent(60);
                series.columns.template.tooltipText = "[bold]{name}[/]\n[font-size:14px]{categoryX}: {valueY}";

                // Add label
                const labelBullet = series.bullets.push(new am4charts.LabelBullet());
                labelBullet.label.text = "{valueY}";
                labelBullet.label.fill = am4core.color(color).alternative;
                labelBullet.locationY = 0.5;

                return series;
            }

            // Themes begin
            am4core.useTheme(am4themes_animated);
            // Themes end

            @* NC / Semaine *@
            // Create chart instance
            @nc1 = am4core.create("@nc1", am4charts.XYChart);
            var chart = @nc1;
            chart.logo.dispose();
            chart.preloader.disabled = true;

            // Add data
            chart.data = [
                @foreach (var data in Model.StackedWeekCategoriesData)
                {
                    <text>{
                    "CategoryName": "@Html.Raw(data.CategoryName)",</text>
                    foreach (var value in data.Values)
                    {
                        <text> "@(Html.Raw(value.Name))": @(value.Value),</text>
                    }
                    <text>},</text>
                }
            ];

            // Create axes
            var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "CategoryName";
            categoryAxis.renderer.grid.template.location = 0;


            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
            //valueAxis.renderer.inside = true;
            //valueAxis.renderer.labels.template.disabled = true;
            valueAxis.min = 0;
            valueAxis.maxPrecision = 0;

            // Create series
            @foreach (var s in Model.StackedWeekCategoriesData.SelectMany(p => p.Values).DistinctBy(p => p.Name).ToList())
            {
                <text>createSeries(chart, "@Html.Raw(s.Name)", "@Html.Raw(s.Name)", "@Html.Raw(s.Color)");</text>
            }

            // Legend
            chart.legend = new am4charts.Legend();

            @* NC / Agence *@
            // Create chart instance
            @nc2 = am4core.create("@nc2", am4charts.XYChart);
            chart = @nc2;
            chart.logo.dispose();
            chart.preloader.disabled = true;

            // Add data
            chart.data = [
                @foreach (var data in Model.StackedAgenceCategoriesData)
                {
                    <text>{
                    "CategoryName": "@Html.Raw(data.CategoryName)",</text>
                    foreach (var value in data.Values)
                    {
                        <text> "@(Html.Raw(value.Name))": @(value.Value),</text>
                    }
                    <text>},</text>
                }
            ];

            // Create axes
            categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "CategoryName";
            categoryAxis.renderer.grid.template.location = 0;


            valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
            //valueAxis.renderer.inside = true;
            //valueAxis.renderer.labels.template.disabled = true;
            valueAxis.min = 0;
            valueAxis.maxPrecision = 0;

            // Create series
            @foreach (var s in Model.StackedAgenceCategoriesData.SelectMany(p => p.Values).DistinctBy(p => p.Name).ToList())
            {
                <text>createSeries(chart, "@Html.Raw(s.Name)", "@Html.Raw(s.Name)", "@Html.Raw(s.Color)");</text>
            }

            // Legend
            chart.legend = new am4charts.Legend();

            @* NC Top Agence *@
            // Create chart instance
            @nc3 = am4core.create("@nc3", am4charts.XYChart);
            chart = @nc3;
            chart.logo.dispose();
            chart.preloader.disabled = true;

            // Add data
            chart.data = [
                @foreach (var data in Model.StackedTopAgenceCategoriesData)
                {
                    <text>{
                    "CategoryName": "@Html.Raw(data.CategoryName)",</text>
                    foreach (var value in data.Values)
                    {
                        <text> "@(Html.Raw(value.Name))": @(value.Value),</text>
                    }
                    <text>},</text>
                }
            ];

            // Create axes
            categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "CategoryName";
            categoryAxis.renderer.grid.template.location = 0;


            valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
            //valueAxis.renderer.inside = true;
            //valueAxis.renderer.labels.template.disabled = true;
            valueAxis.min = 0;
            valueAxis.maxPrecision = 0;

            // Create series
            @foreach (var s in Model.StackedTopAgenceCategoriesData.SelectMany(p => p.Values).DistinctBy(p => p.Name).ToList())
            {
                <text>createSeries(chart, "@Html.Raw(s.Name)", "@Html.Raw(s.Name)", "@Html.Raw(s.Color)");</text>
            }

            // Legend
            chart.legend = new am4charts.Legend();

        }); // end am4core.ready()

    </script>

}