@using Microsoft.Ajax.Utilities
@model Gefco.CipQuai.Web.Views.NCNationalStatViewModel
@{
    ViewBag.PageIcon = "feather icon-home";
    ViewBag.Title = "Rapport National - Non conformités";
    ViewBag.ShowHeader = false;
    Layout = "~/Views/Shared/_AuthLayout.cshtml";

    var ncRegion = Tools.GenerateRandomString(8);
    var nbNc = Tools.GenerateRandomString(8);
    var contrib = Tools.GenerateRandomString(8);
    var cats = Tools.GenerateRandomString(8);
    var ncAgence = Tools.GenerateRandomString(8);
}

<script src="~/Content/assets/amcharts/core.js"></script>
<script src="~/Content/assets/amcharts/charts.js"></script>
<script src="~/Content/assets/amcharts/animated.js"></script>

<div class="row dashboard" id="container">
    @{
        Html.RenderPartial("Filters", Model, new ViewDataDictionary
        {
            {"Title", "Rapport National - Non conformités"}
        });
    }
    <div class="col-xl-12 col-md-12 px-1 px-sm-3">
        <div class="card product-progress-card">
            <div class="card-block p-0">
                <div class="pp-main row m-0">
                    <div class="col-sm-12 col-md-6 px-0">
                        <div class="pp-cont">
                            <div class="w-100">
                                <div class="card sale-card">
                                    <div class="card-header">
                                        <h4>NC / Région</h4>
                                    </div>
                                    <div class="card-block">
                                        <div id="@ncRegion" style="height: 65vh"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-12 col-md-6 px-0">
                        <div class="pp-cont">
                            <div class="w-100">
                                <div class="card sale-card">
                                    <div class="card-header">
                                        <h4>Nb de NC</h4>
                                    </div>
                                    <div class="card-block">
                                        <div id="@nbNc" style="height: 65vh"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-12 col-md-6 px-0">
                        <div class="pp-cont">
                            <div class="w-100">
                                <div class="card sale-card">
                                    <div class="card-header">
                                        <h4>Contributeurs</h4>
                                    </div>
                                    <div class="card-block">
                                        <div id="@contrib" style="height: 55vh"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-12 col-md-6 px-0">
                        <div class="pp-cont">
                            <div class="w-100">
                                <div class="card sale-card">
                                    <div class="card-block">
                                        <div id="@cats" style="height: 55vh"></div>
                                        <div id="@(cats)legenddiv"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 px-0">
                        <div class="pp-cont">
                            <div class="w-100">
                                <div class="card sale-card">
                                    <div class="card-header">
                                        <h4>NC / Agence</h4>
                                    </div>
                                    <div class="card-block">
                                        <div id="@ncAgence" style="height: 65vh"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts
{

<script>
        $("#menu-rapport-national").addClass("active");

        var @nbNc, @ncRegion, @contrib, @cats, @ncAgence;

        function savePDF(type) {
            Promise.all([
                @(nbNc).exporting.pdfmake,
                @(nbNc).exporting.getImage("png"),
                @(ncRegion).exporting.getImage("png"),
                @(contrib).exporting.getImage("png"),
                @(cats).exporting.getImage("png"),
                @(ncAgence).exporting.getImage("png")
            ]).then(function(res) {

                const pdfMake = res[0];

                // pdfmake is ready
                // Create document template
                const doc = {
                    pageSize: "A4",
                    pageOrientation: "landscape",
                    pageMargins: [30, 30, 30, 30],
                    content: []
                };

                doc.content.push({
                    text: "GEFCO CIP Quai",
                    fontSize: 20,
                    bold: true,
                    margin: [0, -10, 0, 0]
                });
                doc.content.push({
                    text: "Rapport National NC du @(ViewBag.StartDate.ToString("dd/MM/yyyy")) au @(ViewBag.EndDate.ToString("dd/MM/yyyy"))",
                    fontSize: 16,
                    bold: false,
                    margin: [0, 10, 0, 30]
                });

                doc.content.push({
                    columns: [{
                            stack: [
                                {
                                    text: "NC / Région",
                                    fontSize: 14,
                                    bold: true,
                                    margin: [0, 5, 0, 5]
                                }, {
                                    image: res[2],
                                    width: 380
                                }
                            ],
                            width: "*"
                        }, {
                            stack: [
                                {
                                    text: "Nb de NC",
                                    fontSize: 14,
                                    bold: true,
                                    margin: [0, 5, 0, 5]
                                }, {
                                    image: res[1],
                                    width: 380
                                }
                            ],
                            width: "*"
                        }
                    ],
                    columnGap: 30, pageOrientation: 'landscape', pageBreak: 'after'
                });
                doc.content.push({
                    text: "GEFCO CIP Quai",
                    fontSize: 20,
                    bold: true,
                    margin: [0, -10, 0, 0]
                });
                doc.content.push({
                    text: "Rapport National NC du @(ViewBag.StartDate.ToString("dd/MM/yyyy")) au @(ViewBag.EndDate.ToString("dd/MM/yyyy"))",
                    fontSize: 16,
                    bold: false,
                    margin: [0, 10, 0, 30]
                });

                doc.content.push({
                    columns: [{
                            stack: [
                                {
                                    text: "Contributeurs",
                                    fontSize: 14,
                                    bold: true,
                                    margin: [0, 5, 0, 5]
                                }, {
                                    image: res[3],
                                    width: 380
                                }
                            ],
                            width: "*"
                    }, {
                            stack: [
                                {
                                    text: "  ",
                                    fontSize: 14,
                                    bold: true,
                                    margin: [0, 5, 0, 5]
                                }, {
                                    image: res[4],
                                    width: 380
                                }
                            ],
                            width: "*"
                        }
                    ],
                    columnGap: 30, pageOrientation: 'landscape', pageBreak: 'after'
                });
                doc.content.push({
                    text: "GEFCO CIP Quai",
                    fontSize: 20,
                    bold: true,
                    margin: [0, -10, 0, 0]
                });
                doc.content.push({
                    text: "Rapport National NC du @(ViewBag.StartDate.ToString("dd/MM/yyyy")) au @(ViewBag.EndDate.ToString("dd/MM/yyyy"))",
                    fontSize: 16,
                    bold: false,
                    margin: [0, 10, 0, 30]
                });

                doc.content.push({
                    stack: [
                        {
                            text: "Nb / Agences",
                            fontSize: 14,
                            bold: true,
                            margin: [0, 5, 0, 5]
                        }, {
                            image: res[5],
                            width: 760
                        }
                    ],
                    width: "*"
                });

                if (type === "print")
                    pdfMake.createPdf(doc).print();
                else
                    pdfMake.createPdf(doc).download("@(DateTime.Now.ToString("yyyyMMdd-hhmmss")) - NC National.pdf");

            });
        }
        function printPDF() {
            savePDF("print");
        }
        am4core.useTheme(am4themes_animated);
        am4core.ready(function() {

            // Themes begin
            am4core.useTheme(am4themes_animated);
            // Themes end

            @* NC / Région *@
            // Create chart instance
            @ncRegion = am4core.create("@ncRegion", am4charts.XYChart);
            var chart = @ncRegion;
            chart.logo.dispose();
            chart.preloader.disabled = true;

            // Add data
            chart.data = [
                @foreach (var data in Model.StackedRegionCategoriesData)
                {
                    <text>{
                    "CategoryName": "@Html.Raw(data.CategoryName)",
                    </text>
                    foreach (var value in data.Values)
                    {
                        <text> "@(Html.Raw(value.Name))": @(value.Value),</text>
                    }
                    <text>},</text>
                }
            ];

            // Create axes
            var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "CategoryName";
            categoryAxis.renderer.grid.template.location = 0;

            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
            //valueAxis.renderer.inside = true;
            //valueAxis.renderer.labels.template.disabled = true;
            valueAxis.min = 0;
            valueAxis.maxPrecision = 0;

            // Create series
            function createSeries(chart, field, name, color) {

                // Set up series
                const series = chart.series.push(new am4charts.ColumnSeries());
                series.name = name;
                series.fill = am4core.color(color);
                series.stroke = am4core.color(color);
                series.dataFields.valueY = field;
                series.dataFields.categoryX = "CategoryName";
                series.sequencedInterpolation = true;

                // Make it stacked
                series.stacked = true;

                // Configure columns
                series.columns.template.width = am4core.percent(60);
                series.columns.template.tooltipText = "[bold]{name}[/]\n[font-size:14px]{categoryX}: {valueY}";

                // Add label
                const labelBullet = series.bullets.push(new am4charts.LabelBullet());
                labelBullet.label.text = "{valueY}";
                labelBullet.label.fill = am4core.color(color).alternative;
                labelBullet.locationY = 0.5;

                return series;
            }

            @foreach (var s in Model.StackedRegionCategoriesData.SelectMany(p => p.Values).DistinctBy(p => p.Name).ToList())
            {
                <text>createSeries(chart, "@Html.Raw(s.Name)", "@Html.Raw(s.Name)", "@Html.Raw(s.Color)");</text>
            }

            // Legend
            chart.legend = new am4charts.Legend();

            @* Nb de NC *@
            // Create chart instance
            @nbNc = am4core.create('@nbNc', am4charts.XYChart);
            chart = @nbNc;
            chart.logo.dispose();
            chart.preloader.disabled = true;
            chart.marginLeft = 0;
            chart.marginRight = 0;

            chart.data = @Html.Raw(Json.Encode(Model.WeekData));

            chart.colors.list = [
                am4core.color("#0B2850"),
                am4core.color("#ffcc00"),
            ];

            // Create axes
            categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "Name";

            valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
            valueAxis.renderer.minWidth = 40;
            valueAxis.min = 0;
            valueAxis.maxPrecision = 0;
            valueAxis.cursorTooltipEnabled = false;

            // Create series
            var series = chart.series.push(new am4charts.LineSeries());
            series.dataFields.valueY = "Value";
            series.dataFields.categoryX = "Name";
            series.tooltipText = "[{categoryX}: bold]{categoryX} : {valueY}[/]";
            series.sequencedInterpolation = true;

            var bullet = series.bullets.push(new am4charts.CircleBullet());
            bullet.circle.fill = am4core.color("#fff");
            bullet.circle.strokeWidth = 3;

            // Cursor
            chart.cursor = new am4charts.XYCursor();

            @* Contributeurs *@
            // Create chart instance
            @contrib = am4core.create("@contrib", am4charts.XYChart);
            chart = @contrib;
            chart.logo.dispose();
            chart.preloader.disabled = true;
            chart.marginLeft = 0;
            chart.marginRight = 0;

            chart.data = @Html.Raw(Json.Encode(Model.ContributorsData));
            @if (Model.ContributorsData.Count <= 2)
            {
                <text>
                    chart.colors.list = [
                        am4core.color("#0B2850"),
                        am4core.color("#ffcc00"),
                    ];
                </text>
            }
            else
            {
                <text>
                    chart.colors.list = [
                        am4core.color("#00538b"),
                        am4core.color("#ffcf79"),
                        am4core.color("#ee9800"),
                        am4core.color("#95d7e9"),
                        am4core.color("#0099d4"),
                        am4core.color("#c2ddb0"),
                        am4core.color("#007d4a"),
                        am4core.color("#f28f9a"),
                        am4core.color("#ae1022"),
                        am4core.color("#7b67a8"),
                        ];
                </text>

            }

            // Create axes
            var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "Name";
            //categoryAxis.renderer.grid.template.location = 0;
            //categoryAxis.renderer.minGridDistance = 0;
            //categoryAxis.tooltip.disabled = true;
            ////categoryAxis.renderer.disabled = true;
            //categoryAxis.renderer.labels.template.rotation = -60;

            categoryAxis.renderer.grid.template.location = 0;
            categoryAxis.renderer.minGridDistance = 30;
            categoryAxis.renderer.labels.template.horizontalCenter = "right";
            categoryAxis.renderer.labels.template.verticalCenter = "middle";
            categoryAxis.renderer.labels.template.rotation = -90;
            categoryAxis.renderer.inside = true;
            categoryAxis.tooltip.disabled = true;
            categoryAxis.renderer.minHeight = 110;

            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
            valueAxis.renderer.minWidth = 40;
            valueAxis.min = 0;
            valueAxis.maxPrecision = 0;
            valueAxis.cursorTooltipEnabled = false;

            // Create series
            var series = chart.series.push(new am4charts.ColumnSeries());
            series.sequencedInterpolation = true;
            series.dataFields.valueY = "Value";
            series.dataFields.categoryX = "Name";
            series.tooltipText = "[{categoryX}: bold]{categoryX} : {valueY}[/]";
            series.columns.template.strokeWidth = 0;

            series.tooltip.pointerOrientation = "vertical";

            series.columns.template.column.cornerRadiusTopLeft = 10;
            series.columns.template.column.cornerRadiusTopRight = 10;
            series.columns.template.column.fillOpacity = 1;

            series.columns.template.adapter.add("fill",
                (fill, target) => {
                    return @(contrib).colors.getIndex(target.dataItem.index);
                });

            // on hover, make corner radiuses bigger
            var hoverState = series.columns.template.column.states.create("hover");
            hoverState.properties.cornerRadiusTopLeft = 0;
            hoverState.properties.cornerRadiusTopRight = 0;
            hoverState.properties.fillOpacity = 1;

            // Cursor
            chart.cursor = new am4charts.XYCursor();

            @* Catégories *@
            // Create chart instance
            @cats = am4core.create("@cats", am4charts.PieChart);
            chart = @cats;
            chart.logo.dispose();
            chart.preloader.disabled = true;
            // Add and configure Series
            var pieSeries = chart.series.push(new am4charts.PieSeries());
            pieSeries.dataFields.value = "Value";
            pieSeries.dataFields.category = "Name";

            pieSeries.slices.template.tooltipText = "{category}: {value.value}";

            // Let's cut a hole in our Pie chart the size of 30% the radius
            chart.innerRadius = am4core.percent(50);

            // Put a thick white border around each Slice
            pieSeries.slices.template.stroke = am4core.color("#fff");
            pieSeries.slices.template.strokeWidth = 2;
            pieSeries.slices.template.strokeOpacity = 1;
            pieSeries.slices.template
                // change the cursor on hover to make it apparent the object can be interacted with
                .cursorOverStyle = [
                    {
                        "property": "cursor",
                        "value": "pointer"
                    }
                ];


            pieSeries.alignLabels = false;
            //pieSeries.labels.template.radius = 3;
            pieSeries.labels.template.padding(0, 0, 0, 0);
            pieSeries.labels.template.text = "{Name}";

            //pieSeries.ticks.template.disabled = true;

            // Create a base filter effect (as if it's not there) for the hover to return to
            var shadow = pieSeries.slices.template.filters.push(new am4core.DropShadowFilter);
            shadow.opacity = 0;

            // Create hover state
            var hoverState =
                pieSeries.slices.template.states
                    .getKey("hover"); // normally we have to create the hover state, in this case it already exists

            // Slightly shift the shadow and make it more prominent on hover
            var hoverShadow = hoverState.filters.push(new am4core.DropShadowFilter);
            hoverShadow.opacity = 0.7;
            hoverShadow.blur = 5;

            // Add a legend
            chart.legend = new am4charts.Legend();
            var legendContainer = am4core.create("@(cats)legenddiv", am4core.Container);
            legendContainer.width = am4core.percent(100);
            legendContainer.height = am4core.percent(100);
            legendContainer.logo.dispose();
            chart.legend.parent = legendContainer;
            chart.legend.valueLabels.template.text = "           ";

            chart.data = @Html.Raw(Json.Encode(Model.PieData));
            pieSeries.colors.list = [
                @foreach (var dataValue in Model.PieData)
                {
                <text>
                    am4core.color("@dataValue.Color"),
                </text>
                }
            ];

            @* NC / Agence *@
            // Create chart instance
            @ncAgence = am4core.create("@ncAgence", am4charts.XYChart);
            chart = @ncAgence;
            chart.logo.dispose();
            chart.preloader.disabled = true;

            // Add data
            chart.data = [
                @foreach (var data in Model.StackedAgenceCategoriesData)
                {
                    <text>{
                    "CategoryName": "@Html.Raw(data.CategoryName)",</text>
                    foreach (var value in data.Values)
                    {
                        <text> "@(Html.Raw(value.Name))": @(value.Value),</text>
                    }
                    <text>},</text>
                }
            ];

            // Create axes
            var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "CategoryName";
            categoryAxis.renderer.grid.template.location = 0;


            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
            //valueAxis.renderer.inside = true;
            //valueAxis.renderer.labels.template.disabled = true;
            valueAxis.min = 0;
            valueAxis.maxPrecision = 0;

            // Create series
            @foreach (var s in Model.StackedAgenceCategoriesData.SelectMany(p => p.Values).DistinctBy(p => p.Name).ToList())
            {
                <text>createSeries(chart, "@Html.Raw(s.Name)", "@Html.Raw(s.Name)", "@Html.Raw(s.Color)");</text>
            }

            // Legend
            chart.legend = new am4charts.Legend();

        }); // end am4core.ready()

</script>

}