@model List<Gefco.CipQuai.Web.Models.DataValue>

@{
    Layout = null;
    var id = Tools.GenerateRandomString(8);
}

<div id="@id" data-dash-key="@ViewBag.DashboardKey" data-dash-type="Pie" class="@(ViewBag.Size == "Medium" ? "g-pie-half" : "g-pie-quarter")">
</div>
<script>
    var @id, label_@id;
    $(function() {

        // Create chart instance
        @id = am4core.create($('#@id')[0], am4charts.XYChart);
        bars.push(@id);
        var chart = @id;
        chart.logo.dispose();
        chart.preloader.disabled = true;
        chart.marginLeft = 0;
        chart.marginRight = 0;

        chart.data = @Html.Raw(Json.Encode(Model));
        chart.dataSource.url = "@Html.Raw(ViewBag.DataUrl)";
        chart.dataSource.events.on("parseended",
            function(ev) {
                if (ev.target.data.Data) {
                    ev.target.data = ev.target.data.Data;
                    ev.target.invalidateData();
                }
            });
        chart.colors.list = [
            am4core.color("#0B2850"),
            am4core.color("#ffcc00"),
            am4core.color("#CCCCCC")
        ];

        // Create axes
        var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
        categoryAxis.dataFields.category = "Name";
        //categoryAxis.renderer.grid.template.location = 0;
        //categoryAxis.renderer.minGridDistance = 0;
        //categoryAxis.tooltip.disabled = true;
        ////categoryAxis.renderer.disabled = true;
        //categoryAxis.renderer.labels.template.rotation = -60;

        categoryAxis.renderer.grid.template.location = 0;
        categoryAxis.renderer.minGridDistance = 30;
        categoryAxis.renderer.labels.template.horizontalCenter = "right";
        categoryAxis.renderer.labels.template.verticalCenter = "middle";
        categoryAxis.renderer.labels.template.rotation = -90;
        categoryAxis.renderer.inside = true;
        categoryAxis.tooltip.disabled = true;
        categoryAxis.renderer.minHeight = 110;
        
        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
        valueAxis.renderer.minWidth = 40;
        valueAxis.min = 0;
        valueAxis.maxPrecision = 0;
        valueAxis.cursorTooltipEnabled = false;

        // Create series
        var series = chart.series.push(new am4charts.ColumnSeries());
        series.sequencedInterpolation = true;
        series.dataFields.valueY = "Value";
        series.dataFields.categoryX = "Name";
        series.tooltipText = "[{categoryX}: bold]{categoryX} : {valueY}[/]";
        series.columns.template.strokeWidth = 0;

        series.tooltip.pointerOrientation = "vertical";

        series.columns.template.column.cornerRadiusTopLeft = 10;
        series.columns.template.column.cornerRadiusTopRight = 10;
        series.columns.template.column.fillOpacity = 1;

        // on hover, make corner radiuses bigger
        var hoverState = series.columns.template.column.states.create("hover");
        hoverState.properties.cornerRadiusTopLeft = 0;
        hoverState.properties.cornerRadiusTopRight = 0;
        hoverState.properties.fillOpacity = 1;

        series.columns.template.adapter.add("fill", (fill, target) => {
            return chart.colors.getIndex(target.dataItem.index);
        })

        // Cursor
        chart.cursor = new am4charts.XYCursor();

        $.connection.EventBroker.on("DeclarationUpdateAsync",
            function(/* string */ declarationType, /* string */ eventType, /* string */ id) {
                if (declarationType == "NC" && eventType == "@ViewBag.EventType") {
                    @if (ViewBag.EventType == "National")
                    {
                        <text>
                            console.log(`EventBroker: OnDeclarationUpdate[@id](declarationType: ${declarationType
                                }, eventType: ${eventType})`);
                            $.get(@(id).dataSource.url,
                                null,
                                function(res) {
                                    @(id).data = res.Data;
                                    @(id).invalidateRawData();
                                    label_@(id).text = res.PercentData;
                                });
                        </text>
                    }
                    else
                    {
                        <text>
                            if (id == "@ViewBag.EventId") {
                                console.log(`EventBroker : OnDeclarationUpdate[@id](declarationType: ${declarationType
                                    }, eventType: ${eventType}, id: ${id})`);
                                $.get(@(id).dataSource.url,
                                    null,
                                    function(res) {
                                        @(id).data = res.Data;
                                        @(id).invalidateRawData();
                                    });
                            }
                        </text>
                    }
                }
            });
    });
</script>