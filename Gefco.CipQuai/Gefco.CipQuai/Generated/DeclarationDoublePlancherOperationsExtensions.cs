// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gefco.CipQuai.ApiClient
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DeclarationDoublePlancherOperations.
    /// </summary>
    public static partial class DeclarationDoublePlancherOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static DeclarationDoublePlancherListServiceResult GetActiveDeclarationDoublePlanchers(this IDeclarationDoublePlancherOperations operations, string appVersion, string userId)
            {
                return operations.GetActiveDeclarationDoublePlanchersAsync(appVersion, userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeclarationDoublePlancherListServiceResult> GetActiveDeclarationDoublePlanchersAsync(this IDeclarationDoublePlancherOperations operations, string appVersion, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActiveDeclarationDoublePlanchersWithHttpMessagesAsync(appVersion, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='declaration'>
            /// </param>
            /// <param name='tractionId'>
            /// </param>
            public static StringServiceResult AddDeclarationDoublePlancher(this IDeclarationDoublePlancherOperations operations, string appVersion, string userId, DeclarationDoublePlancher declaration, string tractionId)
            {
                return operations.AddDeclarationDoublePlancherAsync(appVersion, userId, declaration, tractionId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='declaration'>
            /// </param>
            /// <param name='tractionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringServiceResult> AddDeclarationDoublePlancherAsync(this IDeclarationDoublePlancherOperations operations, string appVersion, string userId, DeclarationDoublePlancher declaration, string tractionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddDeclarationDoublePlancherWithHttpMessagesAsync(appVersion, userId, declaration, tractionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='declaration'>
            /// </param>
            /// <param name='statusId'>
            /// </param>
            public static BooleanServiceResult UpdateDeclarationDoublePlancher(this IDeclarationDoublePlancherOperations operations, string appVersion, string userId, DeclarationDoublePlancher declaration, string statusId)
            {
                return operations.UpdateDeclarationDoublePlancherAsync(appVersion, userId, declaration, statusId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='declaration'>
            /// </param>
            /// <param name='statusId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BooleanServiceResult> UpdateDeclarationDoublePlancherAsync(this IDeclarationDoublePlancherOperations operations, string appVersion, string userId, DeclarationDoublePlancher declaration, string statusId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDeclarationDoublePlancherWithHttpMessagesAsync(appVersion, userId, declaration, statusId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static TractionListServiceResult GetTractions(this IDeclarationDoublePlancherOperations operations, string appVersion, string userId)
            {
                return operations.GetTractionsAsync(appVersion, userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TractionListServiceResult> GetTractionsAsync(this IDeclarationDoublePlancherOperations operations, string appVersion, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTractionsWithHttpMessagesAsync(appVersion, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='pictureType'>
            /// </param>
            /// <param name='declarationId'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='file'>
            /// Upload picture
            /// </param>
            public static PictureServiceResult UploadPictureDP(this IDeclarationDoublePlancherOperations operations, string appVersion, string id, int pictureType, string declarationId, string fileName, Stream file)
            {
                return operations.UploadPictureDPAsync(appVersion, id, pictureType, declarationId, fileName, file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='pictureType'>
            /// </param>
            /// <param name='declarationId'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='file'>
            /// Upload picture
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PictureServiceResult> UploadPictureDPAsync(this IDeclarationDoublePlancherOperations operations, string appVersion, string id, int pictureType, string declarationId, string fileName, Stream file, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadPictureDPWithHttpMessagesAsync(appVersion, id, pictureType, declarationId, fileName, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='pictureType'>
            /// </param>
            /// <param name='declarationId'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='fileContent'>
            /// </param>
            public static PictureServiceResult UploadPicDP(this IDeclarationDoublePlancherOperations operations, string appVersion, string id, int pictureType, string declarationId, string fileName, string fileContent)
            {
                return operations.UploadPicDPAsync(appVersion, id, pictureType, declarationId, fileName, fileContent).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='pictureType'>
            /// </param>
            /// <param name='declarationId'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='fileContent'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PictureServiceResult> UploadPicDPAsync(this IDeclarationDoublePlancherOperations operations, string appVersion, string id, int pictureType, string declarationId, string fileName, string fileContent, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadPicDPWithHttpMessagesAsync(appVersion, id, pictureType, declarationId, fileName, fileContent, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static MotifDPListServiceResult GetMotifDPs(this IDeclarationDoublePlancherOperations operations, string appVersion, string userId)
            {
                return operations.GetMotifDPsAsync(appVersion, userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MotifDPListServiceResult> GetMotifDPsAsync(this IDeclarationDoublePlancherOperations operations, string appVersion, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMotifDPsWithHttpMessagesAsync(appVersion, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
