// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gefco.CipQuai.ApiClient
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DeclarationControleReceptionOperations.
    /// </summary>
    public static partial class DeclarationControleReceptionOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='declaration'>
            /// </param>
            public static BooleanServiceResult AddDeclarationControleReception(this IDeclarationControleReceptionOperations operations, string appVersion, string userId, DeclarationControleReception declaration)
            {
                return operations.AddDeclarationControleReceptionAsync(appVersion, userId, declaration).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='declaration'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BooleanServiceResult> AddDeclarationControleReceptionAsync(this IDeclarationControleReceptionOperations operations, string appVersion, string userId, DeclarationControleReception declaration, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddDeclarationControleReceptionWithHttpMessagesAsync(appVersion, userId, declaration, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='pictureType'>
            /// </param>
            /// <param name='declarationId'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='file'>
            /// Upload picture
            /// </param>
            public static PictureServiceResult UploadPictureCR(this IDeclarationControleReceptionOperations operations, string appVersion, string id, int pictureType, string declarationId, string fileName, Stream file)
            {
                return operations.UploadPictureCRAsync(appVersion, id, pictureType, declarationId, fileName, file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='pictureType'>
            /// </param>
            /// <param name='declarationId'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='file'>
            /// Upload picture
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PictureServiceResult> UploadPictureCRAsync(this IDeclarationControleReceptionOperations operations, string appVersion, string id, int pictureType, string declarationId, string fileName, Stream file, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadPictureCRWithHttpMessagesAsync(appVersion, id, pictureType, declarationId, fileName, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='pictureType'>
            /// </param>
            /// <param name='declarationId'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='fileContent'>
            /// </param>
            public static PictureServiceResult UploadPicCR(this IDeclarationControleReceptionOperations operations, string appVersion, string id, int pictureType, string declarationId, string fileName, string fileContent)
            {
                return operations.UploadPicCRAsync(appVersion, id, pictureType, declarationId, fileName, fileContent).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='pictureType'>
            /// </param>
            /// <param name='declarationId'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='fileContent'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PictureServiceResult> UploadPicCRAsync(this IDeclarationControleReceptionOperations operations, string appVersion, string id, int pictureType, string declarationId, string fileName, string fileContent, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadPicCRWithHttpMessagesAsync(appVersion, id, pictureType, declarationId, fileName, fileContent, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static AgenceListServiceResult GetAgencesCR(this IDeclarationControleReceptionOperations operations, string appVersion, string userId)
            {
                return operations.GetAgencesCRAsync(appVersion, userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AgenceListServiceResult> GetAgencesCRAsync(this IDeclarationControleReceptionOperations operations, string appVersion, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAgencesCRWithHttpMessagesAsync(appVersion, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
