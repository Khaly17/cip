// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gefco.CipQuai.ApiClient
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Account.
    /// </summary>
    public static partial class AccountExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            public static ApplicationUser Login(this IAccount operations, string appVersion, string userName, string password)
            {
                return operations.LoginAsync(appVersion, userName, password).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationUser> LoginAsync(this IAccount operations, string appVersion, string userName, string password, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoginWithHttpMessagesAsync(appVersion, userName, password, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='oldPassword'>
            /// </param>
            /// <param name='newPassword'>
            /// </param>
            public static object ChangePassword(this IAccount operations, string appVersion, string userId, string oldPassword, string newPassword)
            {
                return operations.ChangePasswordAsync(appVersion, userId, oldPassword, newPassword).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='oldPassword'>
            /// </param>
            /// <param name='newPassword'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ChangePasswordAsync(this IAccount operations, string appVersion, string userId, string oldPassword, string newPassword, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangePasswordWithHttpMessagesAsync(appVersion, userId, oldPassword, newPassword, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='email'>
            /// </param>
            public static object ForgotPassword(this IAccount operations, string appVersion, string email)
            {
                return operations.ForgotPasswordAsync(appVersion, email).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ForgotPasswordAsync(this IAccount operations, string appVersion, string email, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ForgotPasswordWithHttpMessagesAsync(appVersion, email, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='fgu'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='firstName'>
            /// </param>
            /// <param name='lastName'>
            /// </param>
            /// <param name='phoneNumber'>
            /// </param>
            public static UserServiceResult Register(this IAccount operations, string appVersion, string fgu, string password, string firstName, string lastName, string phoneNumber)
            {
                return operations.RegisterAsync(appVersion, fgu, password, firstName, lastName, phoneNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='fgu'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='firstName'>
            /// </param>
            /// <param name='lastName'>
            /// </param>
            /// <param name='phoneNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserServiceResult> RegisterAsync(this IAccount operations, string appVersion, string fgu, string password, string firstName, string lastName, string phoneNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterWithHttpMessagesAsync(appVersion, fgu, password, firstName, lastName, phoneNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fgu'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='firstName'>
            /// </param>
            /// <param name='lastName'>
            /// </param>
            /// <param name='phoneNumber'>
            /// </param>
            /// <param name='email'>
            /// </param>
            public static UserServiceResult RegisterSeed(this IAccount operations, string fgu, string password, string firstName, string lastName, string phoneNumber, string email)
            {
                return operations.RegisterSeedAsync(fgu, password, firstName, lastName, phoneNumber, email).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fgu'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='firstName'>
            /// </param>
            /// <param name='lastName'>
            /// </param>
            /// <param name='phoneNumber'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserServiceResult> RegisterSeedAsync(this IAccount operations, string fgu, string password, string firstName, string lastName, string phoneNumber, string email, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterSeedWithHttpMessagesAsync(fgu, password, firstName, lastName, phoneNumber, email, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string SeedMe(this IAccount operations)
            {
                return operations.SeedMeAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> SeedMeAsync(this IAccount operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SeedMeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='firstName'>
            /// </param>
            /// <param name='lastName'>
            /// </param>
            /// <param name='phoneNumber'>
            /// </param>
            public static UserServiceResult Update(this IAccount operations, string appVersion, string userId, string email, string firstName, string lastName, string phoneNumber)
            {
                return operations.UpdateAsync(appVersion, userId, email, firstName, lastName, phoneNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='firstName'>
            /// </param>
            /// <param name='lastName'>
            /// </param>
            /// <param name='phoneNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserServiceResult> UpdateAsync(this IAccount operations, string appVersion, string userId, string email, string firstName, string lastName, string phoneNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(appVersion, userId, email, firstName, lastName, phoneNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='deviceType'>
            /// </param>
            /// <param name='deviceToken'>
            /// </param>
            public static BooleanServiceResult SetDevice(this IAccount operations, string appVersion, string userId, int deviceType, string deviceToken)
            {
                return operations.SetDeviceAsync(appVersion, userId, deviceType, deviceToken).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='deviceType'>
            /// </param>
            /// <param name='deviceToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BooleanServiceResult> SetDeviceAsync(this IAccount operations, string appVersion, string userId, int deviceType, string deviceToken, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetDeviceWithHttpMessagesAsync(appVersion, userId, deviceType, deviceToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static BooleanServiceResult HasVersion(this IAccount operations, string appVersion, string userId)
            {
                return operations.HasVersionAsync(appVersion, userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BooleanServiceResult> HasVersionAsync(this IAccount operations, string appVersion, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HasVersionWithHttpMessagesAsync(appVersion, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='file'>
            /// Upload picture
            /// </param>
            public static PictureServiceResult UploadProfilePicture(this IAccount operations, string appVersion, string id, string fileName, Stream file)
            {
                return operations.UploadProfilePictureAsync(appVersion, id, fileName, file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='file'>
            /// Upload picture
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PictureServiceResult> UploadProfilePictureAsync(this IAccount operations, string appVersion, string id, string fileName, Stream file, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadProfilePictureWithHttpMessagesAsync(appVersion, id, fileName, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='fileContent'>
            /// </param>
            public static PictureServiceResult UploadProfilePic(this IAccount operations, string appVersion, string id, string fileName, string fileContent)
            {
                return operations.UploadProfilePicAsync(appVersion, id, fileName, fileContent).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='fileContent'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PictureServiceResult> UploadProfilePicAsync(this IAccount operations, string appVersion, string id, string fileName, string fileContent, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadProfilePicWithHttpMessagesAsync(appVersion, id, fileName, fileContent, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
