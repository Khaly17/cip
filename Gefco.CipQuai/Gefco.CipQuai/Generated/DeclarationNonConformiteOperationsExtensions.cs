// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gefco.CipQuai.ApiClient
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DeclarationNonConformiteOperations.
    /// </summary>
    public static partial class DeclarationNonConformiteOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='declaration'>
            /// </param>
            public static BooleanServiceResult AddDeclarationNonConformite(this IDeclarationNonConformiteOperations operations, string appVersion, string userId, DeclarationNonConformite declaration)
            {
                return operations.AddDeclarationNonConformiteAsync(appVersion, userId, declaration).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='declaration'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BooleanServiceResult> AddDeclarationNonConformiteAsync(this IDeclarationNonConformiteOperations operations, string appVersion, string userId, DeclarationNonConformite declaration, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddDeclarationNonConformiteWithHttpMessagesAsync(appVersion, userId, declaration, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='pictureType'>
            /// </param>
            /// <param name='declarationId'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='file'>
            /// Upload picture
            /// </param>
            public static PictureServiceResult UploadPictureNC(this IDeclarationNonConformiteOperations operations, string appVersion, string id, int pictureType, string declarationId, string fileName, Stream file)
            {
                return operations.UploadPictureNCAsync(appVersion, id, pictureType, declarationId, fileName, file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='pictureType'>
            /// </param>
            /// <param name='declarationId'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='file'>
            /// Upload picture
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PictureServiceResult> UploadPictureNCAsync(this IDeclarationNonConformiteOperations operations, string appVersion, string id, int pictureType, string declarationId, string fileName, Stream file, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadPictureNCWithHttpMessagesAsync(appVersion, id, pictureType, declarationId, fileName, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='pictureType'>
            /// </param>
            /// <param name='declarationId'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='fileContent'>
            /// </param>
            public static PictureServiceResult UploadPicNC(this IDeclarationNonConformiteOperations operations, string appVersion, string id, int pictureType, string declarationId, string fileName, string fileContent)
            {
                return operations.UploadPicNCAsync(appVersion, id, pictureType, declarationId, fileName, fileContent).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='pictureType'>
            /// </param>
            /// <param name='declarationId'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='fileContent'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PictureServiceResult> UploadPicNCAsync(this IDeclarationNonConformiteOperations operations, string appVersion, string id, int pictureType, string declarationId, string fileName, string fileContent, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadPicNCWithHttpMessagesAsync(appVersion, id, pictureType, declarationId, fileName, fileContent, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static MotifNCListServiceResult GetMotifNCs(this IDeclarationNonConformiteOperations operations, string appVersion, string userId)
            {
                return operations.GetMotifNCsAsync(appVersion, userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MotifNCListServiceResult> GetMotifNCsAsync(this IDeclarationNonConformiteOperations operations, string appVersion, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMotifNCsWithHttpMessagesAsync(appVersion, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static AgenceListServiceResult GetAgences(this IDeclarationNonConformiteOperations operations, string appVersion, string userId)
            {
                return operations.GetAgencesAsync(appVersion, userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AgenceListServiceResult> GetAgencesAsync(this IDeclarationNonConformiteOperations operations, string appVersion, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAgencesWithHttpMessagesAsync(appVersion, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
