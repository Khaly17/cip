// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gefco.CipQuai.ApiClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Business.
    /// </summary>
    public static partial class BusinessExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lastUpdate'>
            /// </param>
            public static ResourceListServiceResult GetResources(this IBusiness operations, string appVersion, string userId, System.DateTime lastUpdate)
            {
                return operations.GetResourcesAsync(appVersion, userId, lastUpdate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lastUpdate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListServiceResult> GetResourcesAsync(this IBusiness operations, string appVersion, string userId, System.DateTime lastUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetResourcesWithHttpMessagesAsync(appVersion, userId, lastUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static RemorqueStatusListServiceResult GetRemorqueStatuses(this IBusiness operations, string appVersion, string userId)
            {
                return operations.GetRemorqueStatusesAsync(appVersion, userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RemorqueStatusListServiceResult> GetRemorqueStatusesAsync(this IBusiness operations, string appVersion, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRemorqueStatusesWithHttpMessagesAsync(appVersion, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static ConfigurationListServiceResult GetConfigurations(this IBusiness operations, string appVersion, string userId)
            {
                return operations.GetConfigurationsAsync(appVersion, userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigurationListServiceResult> GetConfigurationsAsync(this IBusiness operations, string appVersion, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigurationsWithHttpMessagesAsync(appVersion, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static AgenceTypeListServiceResult GetAgenceTypes(this IBusiness operations, string appVersion, string userId)
            {
                return operations.GetAgenceTypesAsync(appVersion, userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appVersion'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AgenceTypeListServiceResult> GetAgenceTypesAsync(this IBusiness operations, string appVersion, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAgenceTypesWithHttpMessagesAsync(appVersion, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
