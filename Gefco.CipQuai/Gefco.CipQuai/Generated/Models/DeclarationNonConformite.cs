// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gefco.CipQuai.ApiClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DeclarationNonConformite
    {
        /// <summary>
        /// Initializes a new instance of the DeclarationNonConformite class.
        /// </summary>
        public DeclarationNonConformite()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeclarationNonConformite class.
        /// </summary>
        public DeclarationNonConformite(string id, System.DateTime creationDate, Agence agenceConcernée = default(Agence), int? currentWorkflowStep = default(int?), IList<MotifNC> motifNCs = default(IList<MotifNC>), string autreMotifNC = default(string), string numVoyage = default(string), IList<Picture> pictures = default(IList<Picture>), DeclarationNcStatus currentStatus = default(DeclarationNcStatus), string currentStatusId = default(string))
        {
            AgenceConcernée = agenceConcernée;
            CurrentWorkflowStep = currentWorkflowStep;
            MotifNCs = motifNCs;
            AutreMotifNC = autreMotifNC;
            NumVoyage = numVoyage;
            Pictures = pictures;
            CurrentStatus = currentStatus;
            CurrentStatusId = currentStatusId;
            Id = id;
            CreationDate = creationDate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AgenceConcernée")]
        public Agence AgenceConcernée { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CurrentWorkflowStep")]
        public int? CurrentWorkflowStep { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MotifNCs")]
        public IList<MotifNC> MotifNCs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AutreMotifNC")]
        public string AutreMotifNC { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "NumVoyage")]
        public string NumVoyage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Pictures")]
        public IList<Picture> Pictures { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CurrentStatus")]
        public DeclarationNcStatus CurrentStatus { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CurrentStatus_Id")]
        public string CurrentStatusId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreationDate")]
        public System.DateTime CreationDate { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (AgenceConcernée != null)
            {
                AgenceConcernée.Validate();
            }
            if (MotifNCs != null)
            {
                foreach (var element in MotifNCs)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Pictures != null)
            {
                foreach (var element1 in Pictures)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (CurrentStatus != null)
            {
                CurrentStatus.Validate();
            }
        }
    }
}
