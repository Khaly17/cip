// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Gefco.CipQuai.ApiClient.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class GefcoCipQuaiWebModelFactory
    {
        /// <summary> Initializes a new instance of ApplicationUser. </summary>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="needsChangePin"></param>
        /// <param name="mobileUserAgence"></param>
        /// <param name="profilePicture"></param>
        /// <param name="resources"></param>
        /// <param name="agenceRoles"></param>
        /// <param name="regionRoles"></param>
        /// <param name="nationalRoles"></param>
        /// <param name="isDeleted"></param>
        /// <param name="email"></param>
        /// <param name="emailConfirmed"></param>
        /// <param name="passwordHash"></param>
        /// <param name="securityStamp"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberConfirmed"></param>
        /// <param name="twoFactorEnabled"></param>
        /// <param name="lockoutEndDateUtc"></param>
        /// <param name="lockoutEnabled"></param>
        /// <param name="accessFailedCount"></param>
        /// <param name="roles"></param>
        /// <param name="claims"></param>
        /// <param name="logins"></param>
        /// <param name="id"></param>
        /// <param name="userName"></param>
        /// <returns> A new <see cref="Models.ApplicationUser"/> instance for mocking. </returns>
        public static ApplicationUser ApplicationUser(string firstName = null, string lastName = null, bool? needsChangePin = null, Agence mobileUserAgence = null, Picture profilePicture = null, IEnumerable<Resource> resources = null, IEnumerable<UserAgenceRole> agenceRoles = null, IEnumerable<UserRegionRole> regionRoles = null, IEnumerable<UserNationalRole> nationalRoles = null, bool? isDeleted = null, string email = null, bool? emailConfirmed = null, string passwordHash = null, string securityStamp = null, string phoneNumber = null, bool? phoneNumberConfirmed = null, bool? twoFactorEnabled = null, DateTimeOffset? lockoutEndDateUtc = null, bool? lockoutEnabled = null, int? accessFailedCount = null, IEnumerable<IdentityUserRole> roles = null, IEnumerable<IdentityUserClaim> claims = null, IEnumerable<IdentityUserLogin> logins = null, string id = null, string userName = null)
        {
            resources ??= new List<Resource>();
            agenceRoles ??= new List<UserAgenceRole>();
            regionRoles ??= new List<UserRegionRole>();
            nationalRoles ??= new List<UserNationalRole>();
            roles ??= new List<IdentityUserRole>();
            claims ??= new List<IdentityUserClaim>();
            logins ??= new List<IdentityUserLogin>();

            return new ApplicationUser(firstName, lastName, needsChangePin, mobileUserAgence, profilePicture, resources?.ToList(), agenceRoles?.ToList(), regionRoles?.ToList(), nationalRoles?.ToList(), isDeleted, email, emailConfirmed, passwordHash, securityStamp, phoneNumber, phoneNumberConfirmed, twoFactorEnabled, lockoutEndDateUtc, lockoutEnabled, accessFailedCount, roles?.ToList(), claims?.ToList(), logins?.ToList(), id, userName);
        }

        /// <summary> Initializes a new instance of IdentityUserRole. </summary>
        /// <param name="userId"></param>
        /// <param name="roleId"></param>
        /// <returns> A new <see cref="Models.IdentityUserRole"/> instance for mocking. </returns>
        public static IdentityUserRole IdentityUserRole(string userId = null, string roleId = null)
        {
            return new IdentityUserRole(userId, roleId);
        }

        /// <summary> Initializes a new instance of IdentityUserClaim. </summary>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="claimType"></param>
        /// <param name="claimValue"></param>
        /// <returns> A new <see cref="Models.IdentityUserClaim"/> instance for mocking. </returns>
        public static IdentityUserClaim IdentityUserClaim(int? id = null, string userId = null, string claimType = null, string claimValue = null)
        {
            return new IdentityUserClaim(id, userId, claimType, claimValue);
        }

        /// <summary> Initializes a new instance of IdentityUserLogin. </summary>
        /// <param name="loginProvider"></param>
        /// <param name="providerKey"></param>
        /// <param name="userId"></param>
        /// <returns> A new <see cref="Models.IdentityUserLogin"/> instance for mocking. </returns>
        public static IdentityUserLogin IdentityUserLogin(string loginProvider = null, string providerKey = null, string userId = null)
        {
            return new IdentityUserLogin(loginProvider, providerKey, userId);
        }

        /// <summary> Initializes a new instance of UserServiceResult. </summary>
        /// <param name="value"></param>
        /// <param name="errorCode"></param>
        /// <param name="isSuccess"></param>
        /// <param name="errorMessage"></param>
        /// <returns> A new <see cref="Models.UserServiceResult"/> instance for mocking. </returns>
        public static UserServiceResult UserServiceResult(ApplicationUser value = null, string errorCode = null, bool? isSuccess = null, string errorMessage = null)
        {
            return new UserServiceResult(value, errorCode, isSuccess, errorMessage);
        }

        /// <summary> Initializes a new instance of BooleanServiceResult. </summary>
        /// <param name="value"></param>
        /// <param name="errorCode"></param>
        /// <param name="isSuccess"></param>
        /// <param name="errorMessage"></param>
        /// <returns> A new <see cref="Models.BooleanServiceResult"/> instance for mocking. </returns>
        public static BooleanServiceResult BooleanServiceResult(bool? value = null, string errorCode = null, bool? isSuccess = null, string errorMessage = null)
        {
            return new BooleanServiceResult(value, errorCode, isSuccess, errorMessage);
        }

        /// <summary> Initializes a new instance of PictureServiceResult. </summary>
        /// <param name="value"></param>
        /// <param name="errorCode"></param>
        /// <param name="isSuccess"></param>
        /// <param name="errorMessage"></param>
        /// <returns> A new <see cref="Models.PictureServiceResult"/> instance for mocking. </returns>
        public static PictureServiceResult PictureServiceResult(Picture value = null, string errorCode = null, bool? isSuccess = null, string errorMessage = null)
        {
            return new PictureServiceResult(value, errorCode, isSuccess, errorMessage);
        }

        /// <summary> Initializes a new instance of ResourceListServiceResult. </summary>
        /// <param name="values"></param>
        /// <param name="errorCode"></param>
        /// <param name="isSuccess"></param>
        /// <param name="errorMessage"></param>
        /// <returns> A new <see cref="Models.ResourceListServiceResult"/> instance for mocking. </returns>
        public static ResourceListServiceResult ResourceListServiceResult(IEnumerable<Resource> values = null, string errorCode = null, bool? isSuccess = null, string errorMessage = null)
        {
            values ??= new List<Resource>();

            return new ResourceListServiceResult(values?.ToList(), errorCode, isSuccess, errorMessage);
        }

        /// <summary> Initializes a new instance of RemorqueStatusListServiceResult. </summary>
        /// <param name="values"></param>
        /// <param name="errorCode"></param>
        /// <param name="isSuccess"></param>
        /// <param name="errorMessage"></param>
        /// <returns> A new <see cref="Models.RemorqueStatusListServiceResult"/> instance for mocking. </returns>
        public static RemorqueStatusListServiceResult RemorqueStatusListServiceResult(IEnumerable<RemorqueStatus> values = null, string errorCode = null, bool? isSuccess = null, string errorMessage = null)
        {
            values ??= new List<RemorqueStatus>();

            return new RemorqueStatusListServiceResult(values?.ToList(), errorCode, isSuccess, errorMessage);
        }

        /// <summary> Initializes a new instance of ConfigurationListServiceResult. </summary>
        /// <param name="values"></param>
        /// <param name="errorCode"></param>
        /// <param name="isSuccess"></param>
        /// <param name="errorMessage"></param>
        /// <returns> A new <see cref="Models.ConfigurationListServiceResult"/> instance for mocking. </returns>
        public static ConfigurationListServiceResult ConfigurationListServiceResult(IEnumerable<Configuration> values = null, string errorCode = null, bool? isSuccess = null, string errorMessage = null)
        {
            values ??= new List<Configuration>();

            return new ConfigurationListServiceResult(values?.ToList(), errorCode, isSuccess, errorMessage);
        }

        /// <summary> Initializes a new instance of Configuration. </summary>
        /// <param name="description"></param>
        /// <param name="value"></param>
        /// <param name="name"></param>
        /// <param name="id"></param>
        /// <param name="creationDate"></param>
        /// <returns> A new <see cref="Models.Configuration"/> instance for mocking. </returns>
        public static Configuration Configuration(string description = null, string value = null, string name = null, string id = null, DateTimeOffset creationDate = default)
        {
            return new Configuration(description, value, name, id, creationDate);
        }

        /// <summary> Initializes a new instance of AgenceTypeListServiceResult. </summary>
        /// <param name="values"></param>
        /// <param name="errorCode"></param>
        /// <param name="isSuccess"></param>
        /// <param name="errorMessage"></param>
        /// <returns> A new <see cref="Models.AgenceTypeListServiceResult"/> instance for mocking. </returns>
        public static AgenceTypeListServiceResult AgenceTypeListServiceResult(IEnumerable<AgenceType> values = null, string errorCode = null, bool? isSuccess = null, string errorMessage = null)
        {
            values ??= new List<AgenceType>();

            return new AgenceTypeListServiceResult(values?.ToList(), errorCode, isSuccess, errorMessage);
        }

        /// <summary> Initializes a new instance of ApplicationUserListServiceResult. </summary>
        /// <param name="values"></param>
        /// <param name="errorCode"></param>
        /// <param name="isSuccess"></param>
        /// <param name="errorMessage"></param>
        /// <returns> A new <see cref="Models.ApplicationUserListServiceResult"/> instance for mocking. </returns>
        public static ApplicationUserListServiceResult ApplicationUserListServiceResult(IEnumerable<ApplicationUser> values = null, string errorCode = null, bool? isSuccess = null, string errorMessage = null)
        {
            values ??= new List<ApplicationUser>();

            return new ApplicationUserListServiceResult(values?.ToList(), errorCode, isSuccess, errorMessage);
        }

        /// <summary> Initializes a new instance of AgenceListServiceResult. </summary>
        /// <param name="values"></param>
        /// <param name="errorCode"></param>
        /// <param name="isSuccess"></param>
        /// <param name="errorMessage"></param>
        /// <returns> A new <see cref="Models.AgenceListServiceResult"/> instance for mocking. </returns>
        public static AgenceListServiceResult AgenceListServiceResult(IEnumerable<Agence> values = null, string errorCode = null, bool? isSuccess = null, string errorMessage = null)
        {
            values ??= new List<Agence>();

            return new AgenceListServiceResult(values?.ToList(), errorCode, isSuccess, errorMessage);
        }

        /// <summary> Initializes a new instance of DeclarationDoublePlancherListServiceResult. </summary>
        /// <param name="values"></param>
        /// <param name="errorCode"></param>
        /// <param name="isSuccess"></param>
        /// <param name="errorMessage"></param>
        /// <returns> A new <see cref="Models.DeclarationDoublePlancherListServiceResult"/> instance for mocking. </returns>
        public static DeclarationDoublePlancherListServiceResult DeclarationDoublePlancherListServiceResult(IEnumerable<DeclarationDoublePlancher> values = null, string errorCode = null, bool? isSuccess = null, string errorMessage = null)
        {
            values ??= new List<DeclarationDoublePlancher>();

            return new DeclarationDoublePlancherListServiceResult(values?.ToList(), errorCode, isSuccess, errorMessage);
        }

        /// <summary> Initializes a new instance of StringServiceResult. </summary>
        /// <param name="value"></param>
        /// <param name="errorCode"></param>
        /// <param name="isSuccess"></param>
        /// <param name="errorMessage"></param>
        /// <returns> A new <see cref="Models.StringServiceResult"/> instance for mocking. </returns>
        public static StringServiceResult StringServiceResult(string value = null, string errorCode = null, bool? isSuccess = null, string errorMessage = null)
        {
            return new StringServiceResult(value, errorCode, isSuccess, errorMessage);
        }

        /// <summary> Initializes a new instance of TractionListServiceResult. </summary>
        /// <param name="values"></param>
        /// <param name="errorCode"></param>
        /// <param name="isSuccess"></param>
        /// <param name="errorMessage"></param>
        /// <returns> A new <see cref="Models.TractionListServiceResult"/> instance for mocking. </returns>
        public static TractionListServiceResult TractionListServiceResult(IEnumerable<Traction> values = null, string errorCode = null, bool? isSuccess = null, string errorMessage = null)
        {
            values ??= new List<Traction>();

            return new TractionListServiceResult(values?.ToList(), errorCode, isSuccess, errorMessage);
        }

        /// <summary> Initializes a new instance of MotifDPListServiceResult. </summary>
        /// <param name="values"></param>
        /// <param name="errorCode"></param>
        /// <param name="isSuccess"></param>
        /// <param name="errorMessage"></param>
        /// <returns> A new <see cref="Models.MotifDPListServiceResult"/> instance for mocking. </returns>
        public static MotifDPListServiceResult MotifDPListServiceResult(IEnumerable<MotifDP> values = null, string errorCode = null, bool? isSuccess = null, string errorMessage = null)
        {
            values ??= new List<MotifDP>();

            return new MotifDPListServiceResult(values?.ToList(), errorCode, isSuccess, errorMessage);
        }

        /// <summary> Initializes a new instance of MotifNCListServiceResult. </summary>
        /// <param name="values"></param>
        /// <param name="errorCode"></param>
        /// <param name="isSuccess"></param>
        /// <param name="errorMessage"></param>
        /// <returns> A new <see cref="Models.MotifNCListServiceResult"/> instance for mocking. </returns>
        public static MotifNCListServiceResult MotifNCListServiceResult(IEnumerable<MotifNC> values = null, string errorCode = null, bool? isSuccess = null, string errorMessage = null)
        {
            values ??= new List<MotifNC>();

            return new MotifNCListServiceResult(values?.ToList(), errorCode, isSuccess, errorMessage);
        }
    }
}
