// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Gefco.CipQuai.ApiClient.Models;

namespace Gefco.CipQuai.ApiClient
{
    internal partial class BusinessRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of BusinessRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public BusinessRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            this.endpoint = endpoint ?? new Uri("http://localhost/CipQuai");
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetResourcesRequest(string appVersion, string userId, DateTimeOffset lastUpdate)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/GetResources", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("userId", userId, true);
            uri.AppendQuery("lastUpdate", lastUpdate, "O", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="lastUpdate"> The DateTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="userId"/> is null. </exception>
        public async Task<Response<ResourceListServiceResult>> GetResourcesAsync(string appVersion, string userId, DateTimeOffset lastUpdate, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetResourcesRequest(appVersion, userId, lastUpdate);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResourceListServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResourceListServiceResult.DeserializeResourceListServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="lastUpdate"> The DateTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="userId"/> is null. </exception>
        public Response<ResourceListServiceResult> GetResources(string appVersion, string userId, DateTimeOffset lastUpdate, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetResourcesRequest(appVersion, userId, lastUpdate);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResourceListServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResourceListServiceResult.DeserializeResourceListServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRemorqueStatusesRequest(string appVersion, string userId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/GetRemorqueStatuses", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("userId", userId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="userId"/> is null. </exception>
        public async Task<Response<RemorqueStatusListServiceResult>> GetRemorqueStatusesAsync(string appVersion, string userId, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetRemorqueStatusesRequest(appVersion, userId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RemorqueStatusListServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RemorqueStatusListServiceResult.DeserializeRemorqueStatusListServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="userId"/> is null. </exception>
        public Response<RemorqueStatusListServiceResult> GetRemorqueStatuses(string appVersion, string userId, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetRemorqueStatusesRequest(appVersion, userId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RemorqueStatusListServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RemorqueStatusListServiceResult.DeserializeRemorqueStatusListServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetConfigurationsRequest(string appVersion, string userId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/GetConfigurations", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("userId", userId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="userId"/> is null. </exception>
        public async Task<Response<ConfigurationListServiceResult>> GetConfigurationsAsync(string appVersion, string userId, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetConfigurationsRequest(appVersion, userId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ConfigurationListServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ConfigurationListServiceResult.DeserializeConfigurationListServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="userId"/> is null. </exception>
        public Response<ConfigurationListServiceResult> GetConfigurations(string appVersion, string userId, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetConfigurationsRequest(appVersion, userId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ConfigurationListServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ConfigurationListServiceResult.DeserializeConfigurationListServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAgenceTypesRequest(string appVersion, string userId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/GetAgenceTypes", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("userId", userId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="userId"/> is null. </exception>
        public async Task<Response<AgenceTypeListServiceResult>> GetAgenceTypesAsync(string appVersion, string userId, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetAgenceTypesRequest(appVersion, userId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AgenceTypeListServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AgenceTypeListServiceResult.DeserializeAgenceTypeListServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="userId"/> is null. </exception>
        public Response<AgenceTypeListServiceResult> GetAgenceTypes(string appVersion, string userId, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetAgenceTypesRequest(appVersion, userId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AgenceTypeListServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AgenceTypeListServiceResult.DeserializeAgenceTypeListServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
