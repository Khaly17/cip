// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Gefco.CipQuai.ApiClient.Models;

namespace Gefco.CipQuai.ApiClient
{
    internal partial class DeclarationNonConformiteRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of DeclarationNonConformiteRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public DeclarationNonConformiteRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            this.endpoint = endpoint ?? new Uri("http://localhost/CipQuai");
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateAddDeclarationNonConformiteRequest(string appVersion, string userId, DeclarationNonConformite declaration)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/AddDeclarationNonConformite", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("userId", userId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(declaration);
            request.Content = content;
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="declaration"> The DeclarationNonConformite to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="userId"/>, or <paramref name="declaration"/> is null. </exception>
        public async Task<Response<BooleanServiceResult>> AddDeclarationNonConformiteAsync(string appVersion, string userId, DeclarationNonConformite declaration, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (declaration == null)
            {
                throw new ArgumentNullException(nameof(declaration));
            }

            using var message = CreateAddDeclarationNonConformiteRequest(appVersion, userId, declaration);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BooleanServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = BooleanServiceResult.DeserializeBooleanServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="declaration"> The DeclarationNonConformite to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="userId"/>, or <paramref name="declaration"/> is null. </exception>
        public Response<BooleanServiceResult> AddDeclarationNonConformite(string appVersion, string userId, DeclarationNonConformite declaration, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (declaration == null)
            {
                throw new ArgumentNullException(nameof(declaration));
            }

            using var message = CreateAddDeclarationNonConformiteRequest(appVersion, userId, declaration);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BooleanServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = BooleanServiceResult.DeserializeBooleanServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUploadPictureNCRequest(string appVersion, string id, Enum9 pictureType, string declarationId, string fileName, Stream file)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/UploadPictureNC", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("id", id, true);
            uri.AppendQuery("pictureType", pictureType.ToString(), true);
            uri.AppendQuery("declarationId", declarationId, true);
            uri.AppendQuery("fileName", fileName, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            request.Headers.Add("Content-Type", "application/x-www-form-urlencoded");
            var content = new FormUrlEncodedContent();
            content.Add("File", file.ToString());
            request.Content = content;
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="id"> The String to use. </param>
        /// <param name="pictureType"> The Enum9 to use. </param>
        /// <param name="declarationId"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="file"> Upload picture. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="id"/>, <paramref name="declarationId"/>, <paramref name="fileName"/>, or <paramref name="file"/> is null. </exception>
        public async Task<Response<PictureServiceResult>> UploadPictureNCAsync(string appVersion, string id, Enum9 pictureType, string declarationId, string fileName, Stream file, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (declarationId == null)
            {
                throw new ArgumentNullException(nameof(declarationId));
            }
            if (fileName == null)
            {
                throw new ArgumentNullException(nameof(fileName));
            }
            if (file == null)
            {
                throw new ArgumentNullException(nameof(file));
            }

            using var message = CreateUploadPictureNCRequest(appVersion, id, pictureType, declarationId, fileName, file);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PictureServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PictureServiceResult.DeserializePictureServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="id"> The String to use. </param>
        /// <param name="pictureType"> The Enum9 to use. </param>
        /// <param name="declarationId"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="file"> Upload picture. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="id"/>, <paramref name="declarationId"/>, <paramref name="fileName"/>, or <paramref name="file"/> is null. </exception>
        public Response<PictureServiceResult> UploadPictureNC(string appVersion, string id, Enum9 pictureType, string declarationId, string fileName, Stream file, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (declarationId == null)
            {
                throw new ArgumentNullException(nameof(declarationId));
            }
            if (fileName == null)
            {
                throw new ArgumentNullException(nameof(fileName));
            }
            if (file == null)
            {
                throw new ArgumentNullException(nameof(file));
            }

            using var message = CreateUploadPictureNCRequest(appVersion, id, pictureType, declarationId, fileName, file);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PictureServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PictureServiceResult.DeserializePictureServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUploadPicNCRequest(string appVersion, string id, Enum10 pictureType, string declarationId, string fileName, string fileContent)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/UploadPicNC", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("id", id, true);
            uri.AppendQuery("pictureType", pictureType.ToString(), true);
            uri.AppendQuery("declarationId", declarationId, true);
            uri.AppendQuery("fileName", fileName, true);
            uri.AppendQuery("fileContent", fileContent, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="id"> The String to use. </param>
        /// <param name="pictureType"> The Enum10 to use. </param>
        /// <param name="declarationId"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="fileContent"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="id"/>, <paramref name="declarationId"/>, <paramref name="fileName"/>, or <paramref name="fileContent"/> is null. </exception>
        public async Task<Response<PictureServiceResult>> UploadPicNCAsync(string appVersion, string id, Enum10 pictureType, string declarationId, string fileName, string fileContent, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (declarationId == null)
            {
                throw new ArgumentNullException(nameof(declarationId));
            }
            if (fileName == null)
            {
                throw new ArgumentNullException(nameof(fileName));
            }
            if (fileContent == null)
            {
                throw new ArgumentNullException(nameof(fileContent));
            }

            using var message = CreateUploadPicNCRequest(appVersion, id, pictureType, declarationId, fileName, fileContent);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PictureServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PictureServiceResult.DeserializePictureServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="id"> The String to use. </param>
        /// <param name="pictureType"> The Enum10 to use. </param>
        /// <param name="declarationId"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="fileContent"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="id"/>, <paramref name="declarationId"/>, <paramref name="fileName"/>, or <paramref name="fileContent"/> is null. </exception>
        public Response<PictureServiceResult> UploadPicNC(string appVersion, string id, Enum10 pictureType, string declarationId, string fileName, string fileContent, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (declarationId == null)
            {
                throw new ArgumentNullException(nameof(declarationId));
            }
            if (fileName == null)
            {
                throw new ArgumentNullException(nameof(fileName));
            }
            if (fileContent == null)
            {
                throw new ArgumentNullException(nameof(fileContent));
            }

            using var message = CreateUploadPicNCRequest(appVersion, id, pictureType, declarationId, fileName, fileContent);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PictureServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PictureServiceResult.DeserializePictureServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetMotifNCsRequest(string appVersion, string userId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/GetMotifNCs", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("userId", userId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="userId"/> is null. </exception>
        public async Task<Response<MotifNCListServiceResult>> GetMotifNCsAsync(string appVersion, string userId, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetMotifNCsRequest(appVersion, userId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MotifNCListServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = MotifNCListServiceResult.DeserializeMotifNCListServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="userId"/> is null. </exception>
        public Response<MotifNCListServiceResult> GetMotifNCs(string appVersion, string userId, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetMotifNCsRequest(appVersion, userId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MotifNCListServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = MotifNCListServiceResult.DeserializeMotifNCListServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAgencesRequest(string appVersion, string userId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/GetAgences", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("userId", userId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="userId"/> is null. </exception>
        public async Task<Response<AgenceListServiceResult>> GetAgencesAsync(string appVersion, string userId, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetAgencesRequest(appVersion, userId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AgenceListServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AgenceListServiceResult.DeserializeAgenceListServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="userId"/> is null. </exception>
        public Response<AgenceListServiceResult> GetAgences(string appVersion, string userId, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetAgencesRequest(appVersion, userId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AgenceListServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AgenceListServiceResult.DeserializeAgenceListServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
