// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Gefco.CipQuai.ApiClient.Models
{
    public partial class Picture : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PicturePath))
            {
                writer.WritePropertyName("PicturePath");
                writer.WriteStringValue(PicturePath);
            }
            if (Optional.IsDefined(PictureType))
            {
                writer.WritePropertyName("PictureType");
                writer.WriteStringValue(PictureType.Value.ToString());
            }
            writer.WritePropertyName("Id");
            writer.WriteStringValue(Id);
            writer.WritePropertyName("CreationDate");
            writer.WriteStringValue(CreationDate, "O");
            writer.WriteEndObject();
        }

        internal static Picture DeserializePicture(JsonElement element)
        {
            Optional<string> picturePath = default;
            Optional<Enum0> pictureType = default;
            string id = default;
            DateTimeOffset creationDate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("PicturePath"))
                {
                    picturePath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("PictureType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    pictureType = new Enum0(property.Value.GetInt32());
                    continue;
                }
                if (property.NameEquals("Id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("CreationDate"))
                {
                    creationDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new Picture(picturePath.Value, Optional.ToNullable(pictureType), id, creationDate);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "Picture");
            if (Optional.IsDefined(PicturePath))
            {
                writer.WriteStartElement("PicturePath");
                writer.WriteValue(PicturePath);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(PictureType))
            {
                writer.WriteStartElement("PictureType");
                writer.WriteValue(PictureType.Value.ToString());
                writer.WriteEndElement();
            }
            writer.WriteStartElement("Id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("CreationDate");
            writer.WriteValue(CreationDate, "O");
            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        internal static Picture DeserializePicture(XElement element)
        {
            string picturePath = default;
            Enum0? pictureType = default;
            string id = default;
            DateTimeOffset creationDate = default;
            if (element.Element("PicturePath") is XElement picturePathElement)
            {
                picturePath = (string)picturePathElement;
            }
            if (element.Element("PictureType") is XElement pictureTypeElement)
            {
                pictureType = new Enum0(pictureTypeElement.Value);
            }
            if (element.Element("Id") is XElement idElement)
            {
                id = (string)idElement;
            }
            if (element.Element("CreationDate") is XElement creationDateElement)
            {
                creationDate = creationDateElement.GetDateTimeOffsetValue("O");
            }
            return new Picture(picturePath, pictureType, id, creationDate);
        }
    }
}
