// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Gefco.CipQuai.ApiClient.Models
{
    public partial class Remorque : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(NumRoRemorque))
            {
                writer.WritePropertyName("NuméroRemorque");
                writer.WriteStringValue(NumRoRemorque);
            }
            if (Optional.IsDefined(IsDoublePlancher))
            {
                writer.WritePropertyName("IsDoublePlancher");
                writer.WriteBooleanValue(IsDoublePlancher.Value);
            }
            writer.WritePropertyName("Id");
            writer.WriteStringValue(Id);
            writer.WritePropertyName("CreationDate");
            writer.WriteStringValue(CreationDate, "O");
            writer.WriteEndObject();
        }

        internal static Remorque DeserializeRemorque(JsonElement element)
        {
            Optional<string> numéroRemorque = default;
            Optional<bool> isDoublePlancher = default;
            string id = default;
            DateTimeOffset creationDate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("NuméroRemorque"))
                {
                    numéroRemorque = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("IsDoublePlancher"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDoublePlancher = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("Id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("CreationDate"))
                {
                    creationDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new Remorque(numéroRemorque.Value, Optional.ToNullable(isDoublePlancher), id, creationDate);
        }
    }
}
