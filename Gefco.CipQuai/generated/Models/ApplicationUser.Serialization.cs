// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Gefco.CipQuai.ApiClient.Models
{
    public partial class ApplicationUser : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(FirstName))
            {
                writer.WritePropertyName("FirstName");
                writer.WriteStringValue(FirstName);
            }
            if (Optional.IsDefined(LastName))
            {
                writer.WritePropertyName("LastName");
                writer.WriteStringValue(LastName);
            }
            if (Optional.IsDefined(NeedsChangePin))
            {
                writer.WritePropertyName("NeedsChangePin");
                writer.WriteBooleanValue(NeedsChangePin.Value);
            }
            if (Optional.IsDefined(MobileUserAgence))
            {
                writer.WritePropertyName("MobileUserAgence");
                writer.WriteObjectValue(MobileUserAgence);
            }
            if (Optional.IsDefined(ProfilePicture))
            {
                writer.WritePropertyName("ProfilePicture");
                writer.WriteObjectValue(ProfilePicture);
            }
            if (Optional.IsCollectionDefined(Resources))
            {
                writer.WritePropertyName("Resources");
                writer.WriteStartArray();
                foreach (var item in Resources)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AgenceRoles))
            {
                writer.WritePropertyName("AgenceRoles");
                writer.WriteStartArray();
                foreach (var item in AgenceRoles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(RegionRoles))
            {
                writer.WritePropertyName("RegionRoles");
                writer.WriteStartArray();
                foreach (var item in RegionRoles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(NationalRoles))
            {
                writer.WritePropertyName("NationalRoles");
                writer.WriteStartArray();
                foreach (var item in NationalRoles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(IsDeleted))
            {
                writer.WritePropertyName("IsDeleted");
                writer.WriteBooleanValue(IsDeleted.Value);
            }
            if (Optional.IsDefined(Email))
            {
                writer.WritePropertyName("Email");
                writer.WriteStringValue(Email);
            }
            if (Optional.IsDefined(EmailConfirmed))
            {
                writer.WritePropertyName("EmailConfirmed");
                writer.WriteBooleanValue(EmailConfirmed.Value);
            }
            if (Optional.IsDefined(PasswordHash))
            {
                writer.WritePropertyName("PasswordHash");
                writer.WriteStringValue(PasswordHash);
            }
            if (Optional.IsDefined(SecurityStamp))
            {
                writer.WritePropertyName("SecurityStamp");
                writer.WriteStringValue(SecurityStamp);
            }
            if (Optional.IsDefined(PhoneNumber))
            {
                writer.WritePropertyName("PhoneNumber");
                writer.WriteStringValue(PhoneNumber);
            }
            if (Optional.IsDefined(PhoneNumberConfirmed))
            {
                writer.WritePropertyName("PhoneNumberConfirmed");
                writer.WriteBooleanValue(PhoneNumberConfirmed.Value);
            }
            if (Optional.IsDefined(TwoFactorEnabled))
            {
                writer.WritePropertyName("TwoFactorEnabled");
                writer.WriteBooleanValue(TwoFactorEnabled.Value);
            }
            if (Optional.IsDefined(LockoutEndDateUtc))
            {
                writer.WritePropertyName("LockoutEndDateUtc");
                writer.WriteStringValue(LockoutEndDateUtc.Value, "O");
            }
            if (Optional.IsDefined(LockoutEnabled))
            {
                writer.WritePropertyName("LockoutEnabled");
                writer.WriteBooleanValue(LockoutEnabled.Value);
            }
            if (Optional.IsDefined(AccessFailedCount))
            {
                writer.WritePropertyName("AccessFailedCount");
                writer.WriteNumberValue(AccessFailedCount.Value);
            }
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("Id");
                writer.WriteStringValue(Id);
            }
            if (Optional.IsDefined(UserName))
            {
                writer.WritePropertyName("UserName");
                writer.WriteStringValue(UserName);
            }
            writer.WriteEndObject();
        }

        internal static ApplicationUser DeserializeApplicationUser(JsonElement element)
        {
            Optional<string> firstName = default;
            Optional<string> lastName = default;
            Optional<bool> needsChangePin = default;
            Optional<Agence> mobileUserAgence = default;
            Optional<Picture> profilePicture = default;
            Optional<IList<Resource>> resources = default;
            Optional<IList<UserAgenceRole>> agenceRoles = default;
            Optional<IList<UserRegionRole>> regionRoles = default;
            Optional<IList<UserNationalRole>> nationalRoles = default;
            Optional<bool> isDeleted = default;
            Optional<string> email = default;
            Optional<bool> emailConfirmed = default;
            Optional<string> passwordHash = default;
            Optional<string> securityStamp = default;
            Optional<string> phoneNumber = default;
            Optional<bool> phoneNumberConfirmed = default;
            Optional<bool> twoFactorEnabled = default;
            Optional<DateTimeOffset> lockoutEndDateUtc = default;
            Optional<bool> lockoutEnabled = default;
            Optional<int> accessFailedCount = default;
            Optional<IReadOnlyList<IdentityUserRole>> roles = default;
            Optional<IReadOnlyList<IdentityUserClaim>> claims = default;
            Optional<IReadOnlyList<IdentityUserLogin>> logins = default;
            Optional<string> id = default;
            Optional<string> userName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("FirstName"))
                {
                    firstName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("LastName"))
                {
                    lastName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("NeedsChangePin"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    needsChangePin = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("MobileUserAgence"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    mobileUserAgence = Agence.DeserializeAgence(property.Value);
                    continue;
                }
                if (property.NameEquals("ProfilePicture"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    profilePicture = Picture.DeserializePicture(property.Value);
                    continue;
                }
                if (property.NameEquals("Resources"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Resource> array = new List<Resource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Resource.DeserializeResource(item));
                    }
                    resources = array;
                    continue;
                }
                if (property.NameEquals("AgenceRoles"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<UserAgenceRole> array = new List<UserAgenceRole>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(UserAgenceRole.DeserializeUserAgenceRole(item));
                    }
                    agenceRoles = array;
                    continue;
                }
                if (property.NameEquals("RegionRoles"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<UserRegionRole> array = new List<UserRegionRole>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(UserRegionRole.DeserializeUserRegionRole(item));
                    }
                    regionRoles = array;
                    continue;
                }
                if (property.NameEquals("NationalRoles"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<UserNationalRole> array = new List<UserNationalRole>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(UserNationalRole.DeserializeUserNationalRole(item));
                    }
                    nationalRoles = array;
                    continue;
                }
                if (property.NameEquals("IsDeleted"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDeleted = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("Email"))
                {
                    email = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("EmailConfirmed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    emailConfirmed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("PasswordHash"))
                {
                    passwordHash = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("SecurityStamp"))
                {
                    securityStamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("PhoneNumber"))
                {
                    phoneNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("PhoneNumberConfirmed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    phoneNumberConfirmed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("TwoFactorEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    twoFactorEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("LockoutEndDateUtc"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lockoutEndDateUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("LockoutEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lockoutEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("AccessFailedCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    accessFailedCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("Roles"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<IdentityUserRole> array = new List<IdentityUserRole>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(IdentityUserRole.DeserializeIdentityUserRole(item));
                    }
                    roles = array;
                    continue;
                }
                if (property.NameEquals("Claims"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<IdentityUserClaim> array = new List<IdentityUserClaim>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(IdentityUserClaim.DeserializeIdentityUserClaim(item));
                    }
                    claims = array;
                    continue;
                }
                if (property.NameEquals("Logins"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<IdentityUserLogin> array = new List<IdentityUserLogin>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(IdentityUserLogin.DeserializeIdentityUserLogin(item));
                    }
                    logins = array;
                    continue;
                }
                if (property.NameEquals("Id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("UserName"))
                {
                    userName = property.Value.GetString();
                    continue;
                }
            }
            return new ApplicationUser(firstName.Value, lastName.Value, Optional.ToNullable(needsChangePin), mobileUserAgence.Value, profilePicture.Value, Optional.ToList(resources), Optional.ToList(agenceRoles), Optional.ToList(regionRoles), Optional.ToList(nationalRoles), Optional.ToNullable(isDeleted), email.Value, Optional.ToNullable(emailConfirmed), passwordHash.Value, securityStamp.Value, phoneNumber.Value, Optional.ToNullable(phoneNumberConfirmed), Optional.ToNullable(twoFactorEnabled), Optional.ToNullable(lockoutEndDateUtc), Optional.ToNullable(lockoutEnabled), Optional.ToNullable(accessFailedCount), Optional.ToList(roles), Optional.ToList(claims), Optional.ToList(logins), id.Value, userName.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "ApplicationUser");
            if (Optional.IsDefined(FirstName))
            {
                writer.WriteStartElement("FirstName");
                writer.WriteValue(FirstName);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(LastName))
            {
                writer.WriteStartElement("LastName");
                writer.WriteValue(LastName);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(NeedsChangePin))
            {
                writer.WriteStartElement("NeedsChangePin");
                writer.WriteValue(NeedsChangePin.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(MobileUserAgence))
            {
                writer.WriteObjectValue(MobileUserAgence, "MobileUserAgence");
            }
            if (Optional.IsDefined(ProfilePicture))
            {
                writer.WriteObjectValue(ProfilePicture, "ProfilePicture");
            }
            if (Optional.IsDefined(IsDeleted))
            {
                writer.WriteStartElement("IsDeleted");
                writer.WriteValue(IsDeleted.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Email))
            {
                writer.WriteStartElement("Email");
                writer.WriteValue(Email);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(EmailConfirmed))
            {
                writer.WriteStartElement("EmailConfirmed");
                writer.WriteValue(EmailConfirmed.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(PasswordHash))
            {
                writer.WriteStartElement("PasswordHash");
                writer.WriteValue(PasswordHash);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(SecurityStamp))
            {
                writer.WriteStartElement("SecurityStamp");
                writer.WriteValue(SecurityStamp);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(PhoneNumber))
            {
                writer.WriteStartElement("PhoneNumber");
                writer.WriteValue(PhoneNumber);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(PhoneNumberConfirmed))
            {
                writer.WriteStartElement("PhoneNumberConfirmed");
                writer.WriteValue(PhoneNumberConfirmed.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(TwoFactorEnabled))
            {
                writer.WriteStartElement("TwoFactorEnabled");
                writer.WriteValue(TwoFactorEnabled.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(LockoutEndDateUtc))
            {
                writer.WriteStartElement("LockoutEndDateUtc");
                writer.WriteValue(LockoutEndDateUtc.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(LockoutEnabled))
            {
                writer.WriteStartElement("LockoutEnabled");
                writer.WriteValue(LockoutEnabled.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(AccessFailedCount))
            {
                writer.WriteStartElement("AccessFailedCount");
                writer.WriteValue(AccessFailedCount.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Id))
            {
                writer.WriteStartElement("Id");
                writer.WriteValue(Id);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(UserName))
            {
                writer.WriteStartElement("UserName");
                writer.WriteValue(UserName);
                writer.WriteEndElement();
            }
            if (Optional.IsCollectionDefined(Resources))
            {
                foreach (var item in Resources)
                {
                    writer.WriteObjectValue(item, "Resource");
                }
            }
            if (Optional.IsCollectionDefined(AgenceRoles))
            {
                foreach (var item in AgenceRoles)
                {
                    writer.WriteObjectValue(item, "UserAgenceRole");
                }
            }
            if (Optional.IsCollectionDefined(RegionRoles))
            {
                foreach (var item in RegionRoles)
                {
                    writer.WriteObjectValue(item, "UserRegionRole");
                }
            }
            if (Optional.IsCollectionDefined(NationalRoles))
            {
                foreach (var item in NationalRoles)
                {
                    writer.WriteObjectValue(item, "UserNationalRole");
                }
            }
            if (Optional.IsCollectionDefined(Roles))
            {
                foreach (var item in Roles)
                {
                    writer.WriteObjectValue(item, "IdentityUserRole");
                }
            }
            if (Optional.IsCollectionDefined(Claims))
            {
                foreach (var item in Claims)
                {
                    writer.WriteObjectValue(item, "IdentityUserClaim");
                }
            }
            if (Optional.IsCollectionDefined(Logins))
            {
                foreach (var item in Logins)
                {
                    writer.WriteObjectValue(item, "IdentityUserLogin");
                }
            }
            writer.WriteEndElement();
        }

        internal static ApplicationUser DeserializeApplicationUser(XElement element)
        {
            string firstName = default;
            string lastName = default;
            bool? needsChangePin = default;
            Agence mobileUserAgence = default;
            Picture profilePicture = default;
            bool? isDeleted = default;
            string email = default;
            bool? emailConfirmed = default;
            string passwordHash = default;
            string securityStamp = default;
            string phoneNumber = default;
            bool? phoneNumberConfirmed = default;
            bool? twoFactorEnabled = default;
            DateTimeOffset? lockoutEndDateUtc = default;
            bool? lockoutEnabled = default;
            int? accessFailedCount = default;
            string id = default;
            string userName = default;
            IList<Resource> resources = default;
            IList<UserAgenceRole> agenceRoles = default;
            IList<UserRegionRole> regionRoles = default;
            IList<UserNationalRole> nationalRoles = default;
            IReadOnlyList<IdentityUserRole> roles = default;
            IReadOnlyList<IdentityUserClaim> claims = default;
            IReadOnlyList<IdentityUserLogin> logins = default;
            if (element.Element("FirstName") is XElement firstNameElement)
            {
                firstName = (string)firstNameElement;
            }
            if (element.Element("LastName") is XElement lastNameElement)
            {
                lastName = (string)lastNameElement;
            }
            if (element.Element("NeedsChangePin") is XElement needsChangePinElement)
            {
                needsChangePin = (bool?)needsChangePinElement;
            }
            if (element.Element("MobileUserAgence") is XElement mobileUserAgenceElement)
            {
                mobileUserAgence = Agence.DeserializeAgence(mobileUserAgenceElement);
            }
            if (element.Element("ProfilePicture") is XElement profilePictureElement)
            {
                profilePicture = Picture.DeserializePicture(profilePictureElement);
            }
            if (element.Element("IsDeleted") is XElement isDeletedElement)
            {
                isDeleted = (bool?)isDeletedElement;
            }
            if (element.Element("Email") is XElement emailElement)
            {
                email = (string)emailElement;
            }
            if (element.Element("EmailConfirmed") is XElement emailConfirmedElement)
            {
                emailConfirmed = (bool?)emailConfirmedElement;
            }
            if (element.Element("PasswordHash") is XElement passwordHashElement)
            {
                passwordHash = (string)passwordHashElement;
            }
            if (element.Element("SecurityStamp") is XElement securityStampElement)
            {
                securityStamp = (string)securityStampElement;
            }
            if (element.Element("PhoneNumber") is XElement phoneNumberElement)
            {
                phoneNumber = (string)phoneNumberElement;
            }
            if (element.Element("PhoneNumberConfirmed") is XElement phoneNumberConfirmedElement)
            {
                phoneNumberConfirmed = (bool?)phoneNumberConfirmedElement;
            }
            if (element.Element("TwoFactorEnabled") is XElement twoFactorEnabledElement)
            {
                twoFactorEnabled = (bool?)twoFactorEnabledElement;
            }
            if (element.Element("LockoutEndDateUtc") is XElement lockoutEndDateUtcElement)
            {
                lockoutEndDateUtc = lockoutEndDateUtcElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("LockoutEnabled") is XElement lockoutEnabledElement)
            {
                lockoutEnabled = (bool?)lockoutEnabledElement;
            }
            if (element.Element("AccessFailedCount") is XElement accessFailedCountElement)
            {
                accessFailedCount = (int?)accessFailedCountElement;
            }
            if (element.Element("Id") is XElement idElement)
            {
                id = (string)idElement;
            }
            if (element.Element("UserName") is XElement userNameElement)
            {
                userName = (string)userNameElement;
            }
            var array = new List<Resource>();
            foreach (var e in element.Elements("Resource"))
            {
                array.Add(Resource.DeserializeResource(e));
            }
            resources = array;
            var array0 = new List<UserAgenceRole>();
            foreach (var e in element.Elements("UserAgenceRole"))
            {
                array0.Add(UserAgenceRole.DeserializeUserAgenceRole(e));
            }
            agenceRoles = array0;
            var array1 = new List<UserRegionRole>();
            foreach (var e in element.Elements("UserRegionRole"))
            {
                array1.Add(UserRegionRole.DeserializeUserRegionRole(e));
            }
            regionRoles = array1;
            var array2 = new List<UserNationalRole>();
            foreach (var e in element.Elements("UserNationalRole"))
            {
                array2.Add(UserNationalRole.DeserializeUserNationalRole(e));
            }
            nationalRoles = array2;
            var array3 = new List<IdentityUserRole>();
            foreach (var e in element.Elements("IdentityUserRole"))
            {
                array3.Add(IdentityUserRole.DeserializeIdentityUserRole(e));
            }
            roles = array3;
            var array4 = new List<IdentityUserClaim>();
            foreach (var e in element.Elements("IdentityUserClaim"))
            {
                array4.Add(IdentityUserClaim.DeserializeIdentityUserClaim(e));
            }
            claims = array4;
            var array5 = new List<IdentityUserLogin>();
            foreach (var e in element.Elements("IdentityUserLogin"))
            {
                array5.Add(IdentityUserLogin.DeserializeIdentityUserLogin(e));
            }
            logins = array5;
            return new ApplicationUser(firstName, lastName, needsChangePin, mobileUserAgence, profilePicture, resources, agenceRoles, regionRoles, nationalRoles, isDeleted, email, emailConfirmed, passwordHash, securityStamp, phoneNumber, phoneNumberConfirmed, twoFactorEnabled, lockoutEndDateUtc, lockoutEnabled, accessFailedCount, roles, claims, logins, id, userName);
        }
    }
}
