// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace Gefco.CipQuai.ApiClient.Models
{
    /// <summary> The Enum9. </summary>
    public readonly partial struct Enum9 : IEquatable<Enum9>
    {
        private readonly int _value;

        /// <summary> Initializes a new instance of <see cref="Enum9"/>. </summary>
        public Enum9(int value)
        {
            _value = value;
        }

        private const int ZeroValue = 0;
        private const int OneValue = 1;
        private const int TwoValue = 2;
        private const int ThreeValue = 3;
        private const int FourValue = 4;
        private const int FiveValue = 5;
        private const int SixValue = 6;
        private const int SevenValue = 7;
        private const int EightValue = 8;
        private const int NineValue = 9;

        /// <summary> 0. </summary>
        public static Enum9 Zero { get; } = new Enum9(ZeroValue);
        /// <summary> 1. </summary>
        public static Enum9 One { get; } = new Enum9(OneValue);
        /// <summary> 2. </summary>
        public static Enum9 Two { get; } = new Enum9(TwoValue);
        /// <summary> 3. </summary>
        public static Enum9 Three { get; } = new Enum9(ThreeValue);
        /// <summary> 4. </summary>
        public static Enum9 Four { get; } = new Enum9(FourValue);
        /// <summary> 5. </summary>
        public static Enum9 Five { get; } = new Enum9(FiveValue);
        /// <summary> 6. </summary>
        public static Enum9 Six { get; } = new Enum9(SixValue);
        /// <summary> 7. </summary>
        public static Enum9 Seven { get; } = new Enum9(SevenValue);
        /// <summary> 8. </summary>
        public static Enum9 Eight { get; } = new Enum9(EightValue);
        /// <summary> 9. </summary>
        public static Enum9 Nine { get; } = new Enum9(NineValue);
        /// <summary> Determines if two <see cref="Enum9"/> values are the same. </summary>
        public static bool operator ==(Enum9 left, Enum9 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Enum9"/> values are not the same. </summary>
        public static bool operator !=(Enum9 left, Enum9 right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Enum9"/>. </summary>
        public static implicit operator Enum9(int value) => new Enum9(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Enum9 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Enum9 other) => Equals(_value, other._value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();
        /// <inheritdoc />
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
