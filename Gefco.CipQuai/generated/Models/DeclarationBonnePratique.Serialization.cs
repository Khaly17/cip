// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Gefco.CipQuai.ApiClient.Models
{
    public partial class DeclarationBonnePratique : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AgentConcern))
            {
                writer.WritePropertyName("AgentConcerné");
                writer.WriteObjectValue(AgentConcern);
            }
            if (Optional.IsDefined(AutreAgentConcern))
            {
                writer.WritePropertyName("AutreAgentConcerné");
                writer.WriteStringValue(AutreAgentConcern);
            }
            if (Optional.IsDefined(CurrentWorkflowStep))
            {
                writer.WritePropertyName("CurrentWorkflowStep");
                writer.WriteNumberValue(CurrentWorkflowStep.Value);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("Description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Pictures))
            {
                writer.WritePropertyName("Pictures");
                writer.WriteStartArray();
                foreach (var item in Pictures)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("Id");
            writer.WriteStringValue(Id);
            writer.WritePropertyName("CreationDate");
            writer.WriteStringValue(CreationDate, "O");
            writer.WriteEndObject();
        }

        internal static DeclarationBonnePratique DeserializeDeclarationBonnePratique(JsonElement element)
        {
            Optional<ApplicationUser> agentConcerné = default;
            Optional<string> autreAgentConcerné = default;
            Optional<int> currentWorkflowStep = default;
            Optional<string> description = default;
            Optional<IList<Picture>> pictures = default;
            string id = default;
            DateTimeOffset creationDate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("AgentConcerné"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    agentConcerné = ApplicationUser.DeserializeApplicationUser(property.Value);
                    continue;
                }
                if (property.NameEquals("AutreAgentConcerné"))
                {
                    autreAgentConcerné = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("CurrentWorkflowStep"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    currentWorkflowStep = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("Description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Pictures"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Picture> array = new List<Picture>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Picture.DeserializePicture(item));
                    }
                    pictures = array;
                    continue;
                }
                if (property.NameEquals("Id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("CreationDate"))
                {
                    creationDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new DeclarationBonnePratique(agentConcerné.Value, autreAgentConcerné.Value, Optional.ToNullable(currentWorkflowStep), description.Value, Optional.ToList(pictures), id, creationDate);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "DeclarationBonnePratique");
            if (Optional.IsDefined(AgentConcern))
            {
                writer.WriteObjectValue(AgentConcern, "AgentConcerné");
            }
            if (Optional.IsDefined(AutreAgentConcern))
            {
                writer.WriteStartElement("AutreAgentConcerné");
                writer.WriteValue(AutreAgentConcern);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(CurrentWorkflowStep))
            {
                writer.WriteStartElement("CurrentWorkflowStep");
                writer.WriteValue(CurrentWorkflowStep.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Description))
            {
                writer.WriteStartElement("Description");
                writer.WriteValue(Description);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("Id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("CreationDate");
            writer.WriteValue(CreationDate, "O");
            writer.WriteEndElement();
            if (Optional.IsCollectionDefined(Pictures))
            {
                foreach (var item in Pictures)
                {
                    writer.WriteObjectValue(item, "Picture");
                }
            }
            writer.WriteEndElement();
        }

        internal static DeclarationBonnePratique DeserializeDeclarationBonnePratique(XElement element)
        {
            ApplicationUser agentConcern = default;
            string autreAgentConcern = default;
            int? currentWorkflowStep = default;
            string description = default;
            string id = default;
            DateTimeOffset creationDate = default;
            IList<Picture> pictures = default;
            if (element.Element("AgentConcerné") is XElement agentConcernéElement)
            {
                agentConcern = ApplicationUser.DeserializeApplicationUser(agentConcernéElement);
            }
            if (element.Element("AutreAgentConcerné") is XElement autreAgentConcernéElement)
            {
                autreAgentConcern = (string)autreAgentConcernéElement;
            }
            if (element.Element("CurrentWorkflowStep") is XElement currentWorkflowStepElement)
            {
                currentWorkflowStep = (int?)currentWorkflowStepElement;
            }
            if (element.Element("Description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            if (element.Element("Id") is XElement idElement)
            {
                id = (string)idElement;
            }
            if (element.Element("CreationDate") is XElement creationDateElement)
            {
                creationDate = creationDateElement.GetDateTimeOffsetValue("O");
            }
            var array = new List<Picture>();
            foreach (var e in element.Elements("Picture"))
            {
                array.Add(Picture.DeserializePicture(e));
            }
            pictures = array;
            return new DeclarationBonnePratique(agentConcern, autreAgentConcern, currentWorkflowStep, description, pictures, id, creationDate);
        }
    }
}
