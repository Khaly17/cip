// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml.Linq;
using Azure.Core;

namespace Gefco.CipQuai.ApiClient.Models
{
    public partial class IdentityUserClaim
    {
        internal static IdentityUserClaim DeserializeIdentityUserClaim(JsonElement element)
        {
            Optional<int> id = default;
            Optional<string> userId = default;
            Optional<string> claimType = default;
            Optional<string> claimValue = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("Id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    id = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("UserId"))
                {
                    userId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ClaimType"))
                {
                    claimType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ClaimValue"))
                {
                    claimValue = property.Value.GetString();
                    continue;
                }
            }
            return new IdentityUserClaim(Optional.ToNullable(id), userId.Value, claimType.Value, claimValue.Value);
        }

        internal static IdentityUserClaim DeserializeIdentityUserClaim(XElement element)
        {
            int? id = default;
            string userId = default;
            string claimType = default;
            string claimValue = default;
            if (element.Element("Id") is XElement idElement)
            {
                id = (int?)idElement;
            }
            if (element.Element("UserId") is XElement userIdElement)
            {
                userId = (string)userIdElement;
            }
            if (element.Element("ClaimType") is XElement claimTypeElement)
            {
                claimType = (string)claimTypeElement;
            }
            if (element.Element("ClaimValue") is XElement claimValueElement)
            {
                claimValue = (string)claimValueElement;
            }
            return new IdentityUserClaim(id, userId, claimType, claimValue);
        }
    }
}
