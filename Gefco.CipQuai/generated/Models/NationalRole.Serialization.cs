// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Gefco.CipQuai.ApiClient.Models
{
    public partial class NationalRole : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Key))
            {
                writer.WritePropertyName("Key");
                writer.WriteNumberValue(Key.Value);
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("Value");
                writer.WriteStringValue(Value);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("Description");
                writer.WriteStringValue(Description);
            }
            writer.WriteEndObject();
        }

        internal static NationalRole DeserializeNationalRole(JsonElement element)
        {
            Optional<int> key = default;
            Optional<string> value = default;
            Optional<string> description = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("Key"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    key = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("Value"))
                {
                    value = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
            }
            return new NationalRole(Optional.ToNullable(key), value.Value, description.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "NationalRole");
            if (Optional.IsDefined(Key))
            {
                writer.WriteStartElement("Key");
                writer.WriteValue(Key.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Value))
            {
                writer.WriteStartElement("Value");
                writer.WriteValue(Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Description))
            {
                writer.WriteStartElement("Description");
                writer.WriteValue(Description);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static NationalRole DeserializeNationalRole(XElement element)
        {
            int? key = default;
            string value = default;
            string description = default;
            if (element.Element("Key") is XElement keyElement)
            {
                key = (int?)keyElement;
            }
            if (element.Element("Value") is XElement valueElement)
            {
                value = (string)valueElement;
            }
            if (element.Element("Description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            return new NationalRole(key, value, description);
        }
    }
}
