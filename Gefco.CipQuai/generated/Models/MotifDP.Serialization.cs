// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Gefco.CipQuai.ApiClient.Models
{
    public partial class MotifDP : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DisplayOrder))
            {
                writer.WritePropertyName("DisplayOrder");
                writer.WriteNumberValue(DisplayOrder.Value);
            }
            if (Optional.IsDefined(NeedPicture))
            {
                writer.WritePropertyName("NeedPicture");
                writer.WriteBooleanValue(NeedPicture.Value);
            }
            if (Optional.IsDefined(IsNbDP))
            {
                writer.WritePropertyName("IsNbDP");
                writer.WriteBooleanValue(IsNbDP.Value);
            }
            if (Optional.IsDefined(IsOther))
            {
                writer.WritePropertyName("IsOther");
                writer.WriteBooleanValue(IsOther.Value);
            }
            writer.WritePropertyName("Name");
            writer.WriteStringValue(Name);
            writer.WritePropertyName("Id");
            writer.WriteStringValue(Id);
            writer.WritePropertyName("CreationDate");
            writer.WriteStringValue(CreationDate, "O");
            writer.WriteEndObject();
        }

        internal static MotifDP DeserializeMotifDP(JsonElement element)
        {
            Optional<int> displayOrder = default;
            Optional<bool> needPicture = default;
            Optional<bool> isNbDP = default;
            Optional<bool> isOther = default;
            string name = default;
            string id = default;
            DateTimeOffset creationDate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("DisplayOrder"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    displayOrder = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("NeedPicture"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    needPicture = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("IsNbDP"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isNbDP = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("IsOther"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isOther = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("Name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("CreationDate"))
                {
                    creationDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new MotifDP(Optional.ToNullable(displayOrder), Optional.ToNullable(needPicture), Optional.ToNullable(isNbDP), Optional.ToNullable(isOther), name, id, creationDate);
        }
    }
}
