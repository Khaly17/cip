// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Gefco.CipQuai.ApiClient.Models
{
    public partial class Traction : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AgenceDepart))
            {
                writer.WritePropertyName("AgenceDepart");
                writer.WriteObjectValue(AgenceDepart);
            }
            if (Optional.IsDefined(AgenceArrivee))
            {
                writer.WritePropertyName("AgenceArrivee");
                writer.WriteObjectValue(AgenceArrivee);
            }
            if (Optional.IsDefined(NumeroBorderau))
            {
                writer.WritePropertyName("NumeroBorderau");
                writer.WriteStringValue(NumeroBorderau);
            }
            if (Optional.IsDefined(IdVoyage))
            {
                writer.WritePropertyName("IdVoyage");
                writer.WriteStringValue(IdVoyage);
            }
            if (Optional.IsDefined(DueDate))
            {
                writer.WritePropertyName("DueDate");
                writer.WriteStringValue(DueDate.Value, "O");
            }
            if (Optional.IsDefined(IsCreated))
            {
                writer.WritePropertyName("IsCreated");
                writer.WriteBooleanValue(IsCreated.Value);
            }
            if (Optional.IsDefined(IsCancelled))
            {
                writer.WritePropertyName("IsCancelled");
                writer.WriteBooleanValue(IsCancelled.Value);
            }
            if (Optional.IsDefined(CancelReason))
            {
                writer.WritePropertyName("CancelReason");
                writer.WriteStringValue(CancelReason);
            }
            writer.WritePropertyName("Name");
            writer.WriteStringValue(Name);
            writer.WritePropertyName("Id");
            writer.WriteStringValue(Id);
            writer.WritePropertyName("CreationDate");
            writer.WriteStringValue(CreationDate, "O");
            writer.WriteEndObject();
        }

        internal static Traction DeserializeTraction(JsonElement element)
        {
            Optional<Agence> agenceDepart = default;
            Optional<Agence> agenceArrivee = default;
            Optional<string> numeroBorderau = default;
            Optional<string> idVoyage = default;
            Optional<DateTimeOffset> dueDate = default;
            Optional<bool> isCreated = default;
            Optional<bool> isCancelled = default;
            Optional<string> cancelReason = default;
            string name = default;
            string id = default;
            DateTimeOffset creationDate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("AgenceDepart"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    agenceDepart = Agence.DeserializeAgence(property.Value);
                    continue;
                }
                if (property.NameEquals("AgenceArrivee"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    agenceArrivee = Agence.DeserializeAgence(property.Value);
                    continue;
                }
                if (property.NameEquals("NumeroBorderau"))
                {
                    numeroBorderau = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("IdVoyage"))
                {
                    idVoyage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("DueDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dueDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("IsCreated"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isCreated = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("IsCancelled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isCancelled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("CancelReason"))
                {
                    cancelReason = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("CreationDate"))
                {
                    creationDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new Traction(agenceDepart.Value, agenceArrivee.Value, numeroBorderau.Value, idVoyage.Value, Optional.ToNullable(dueDate), Optional.ToNullable(isCreated), Optional.ToNullable(isCancelled), cancelReason.Value, name, id, creationDate);
        }
    }
}
