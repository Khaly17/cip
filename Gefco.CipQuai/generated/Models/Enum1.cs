// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace Gefco.CipQuai.ApiClient.Models
{
    /// <summary> The Enum1. </summary>
    public readonly partial struct Enum1 : IEquatable<Enum1>
    {
        private readonly int _value;

        /// <summary> Initializes a new instance of <see cref="Enum1"/>. </summary>
        public Enum1(int value)
        {
            _value = value;
        }

        private const int ZeroValue = 0;
        private const int OneValue = 1;
        private const int TwoValue = 2;
        private const int ThreeValue = 3;
        private const int FourValue = 4;

        /// <summary> 0. </summary>
        public static Enum1 Zero { get; } = new Enum1(ZeroValue);
        /// <summary> 1. </summary>
        public static Enum1 One { get; } = new Enum1(OneValue);
        /// <summary> 2. </summary>
        public static Enum1 Two { get; } = new Enum1(TwoValue);
        /// <summary> 3. </summary>
        public static Enum1 Three { get; } = new Enum1(ThreeValue);
        /// <summary> 4. </summary>
        public static Enum1 Four { get; } = new Enum1(FourValue);
        /// <summary> Determines if two <see cref="Enum1"/> values are the same. </summary>
        public static bool operator ==(Enum1 left, Enum1 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Enum1"/> values are not the same. </summary>
        public static bool operator !=(Enum1 left, Enum1 right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Enum1"/>. </summary>
        public static implicit operator Enum1(int value) => new Enum1(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Enum1 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Enum1 other) => Equals(_value, other._value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();
        /// <inheritdoc />
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
