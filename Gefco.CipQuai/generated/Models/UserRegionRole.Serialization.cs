// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Gefco.CipQuai.ApiClient.Models
{
    public partial class UserRegionRole : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("Id");
                writer.WriteStringValue(Id);
            }
            if (Optional.IsDefined(UserId))
            {
                writer.WritePropertyName("User_Id");
                writer.WriteStringValue(UserId);
            }
            if (Optional.IsDefined(RegionRoleId))
            {
                writer.WritePropertyName("RegionRole_Id");
                writer.WriteNumberValue(RegionRoleId.Value);
            }
            if (Optional.IsDefined(RegionId))
            {
                writer.WritePropertyName("Region_Id");
                writer.WriteStringValue(RegionId);
            }
            if (Optional.IsDefined(User))
            {
                writer.WritePropertyName("User");
                writer.WriteObjectValue(User);
            }
            if (Optional.IsDefined(RegionRole))
            {
                writer.WritePropertyName("RegionRole");
                writer.WriteObjectValue(RegionRole);
            }
            if (Optional.IsDefined(Region))
            {
                writer.WritePropertyName("Region");
                writer.WriteObjectValue(Region);
            }
            writer.WriteEndObject();
        }

        internal static UserRegionRole DeserializeUserRegionRole(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> userId = default;
            Optional<int> regionRoleId = default;
            Optional<string> regionId = default;
            Optional<ApplicationUser> user = default;
            Optional<RegionRole> regionRole = default;
            Optional<Region> region = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("Id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("User_Id"))
                {
                    userId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("RegionRole_Id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    regionRoleId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("Region_Id"))
                {
                    regionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("User"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    user = ApplicationUser.DeserializeApplicationUser(property.Value);
                    continue;
                }
                if (property.NameEquals("RegionRole"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    regionRole = RegionRole.DeserializeRegionRole(property.Value);
                    continue;
                }
                if (property.NameEquals("Region"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    region = Region.DeserializeRegion(property.Value);
                    continue;
                }
            }
            return new UserRegionRole(id.Value, userId.Value, Optional.ToNullable(regionRoleId), regionId.Value, user.Value, regionRole.Value, region.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "UserRegionRole");
            if (Optional.IsDefined(Id))
            {
                writer.WriteStartElement("Id");
                writer.WriteValue(Id);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(UserId))
            {
                writer.WriteStartElement("User_Id");
                writer.WriteValue(UserId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(RegionRoleId))
            {
                writer.WriteStartElement("RegionRole_Id");
                writer.WriteValue(RegionRoleId.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(RegionId))
            {
                writer.WriteStartElement("Region_Id");
                writer.WriteValue(RegionId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(User))
            {
                writer.WriteObjectValue(User, "User");
            }
            if (Optional.IsDefined(RegionRole))
            {
                writer.WriteObjectValue(RegionRole, "RegionRole");
            }
            if (Optional.IsDefined(Region))
            {
                writer.WriteObjectValue(Region, "Region");
            }
            writer.WriteEndElement();
        }

        internal static UserRegionRole DeserializeUserRegionRole(XElement element)
        {
            string id = default;
            string userId = default;
            int? regionRoleId = default;
            string regionId = default;
            ApplicationUser user = default;
            RegionRole regionRole = default;
            Region region = default;
            if (element.Element("Id") is XElement idElement)
            {
                id = (string)idElement;
            }
            if (element.Element("User_Id") is XElement userIdElement)
            {
                userId = (string)userIdElement;
            }
            if (element.Element("RegionRole_Id") is XElement regionRoleIdElement)
            {
                regionRoleId = (int?)regionRoleIdElement;
            }
            if (element.Element("Region_Id") is XElement regionIdElement)
            {
                regionId = (string)regionIdElement;
            }
            if (element.Element("User") is XElement userElement)
            {
                user = ApplicationUser.DeserializeApplicationUser(userElement);
            }
            if (element.Element("RegionRole") is XElement regionRoleElement)
            {
                regionRole = RegionRole.DeserializeRegionRole(regionRoleElement);
            }
            if (element.Element("Region") is XElement regionElement)
            {
                region = Region.DeserializeRegion(regionElement);
            }
            return new UserRegionRole(id, userId, regionRoleId, regionId, user, regionRole, region);
        }
    }
}
