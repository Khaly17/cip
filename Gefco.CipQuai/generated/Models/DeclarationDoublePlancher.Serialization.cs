// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Gefco.CipQuai.ApiClient.Models
{
    public partial class DeclarationDoublePlancher : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(IsDPUsed))
            {
                writer.WritePropertyName("IsDPUsed");
                writer.WriteBooleanValue(IsDPUsed.Value);
            }
            if (Optional.IsCollectionDefined(MotifDps))
            {
                writer.WritePropertyName("MotifDps");
                writer.WriteStartArray();
                foreach (var item in MotifDps)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AutreMotifDP))
            {
                writer.WritePropertyName("AutreMotifDP");
                writer.WriteStringValue(AutreMotifDP);
            }
            if (Optional.IsDefined(NbDPCassEs))
            {
                writer.WritePropertyName("NbDPCassées");
                writer.WriteNumberValue(NbDPCassEs.Value);
            }
            if (Optional.IsDefined(IsCr))
            {
                writer.WritePropertyName("IsCr");
                writer.WriteBooleanValue(IsCr.Value);
            }
            if (Optional.IsDefined(Traction))
            {
                writer.WritePropertyName("Traction");
                writer.WriteObjectValue(Traction);
            }
            if (Optional.IsDefined(TractionId))
            {
                writer.WritePropertyName("Traction_Id");
                writer.WriteStringValue(TractionId);
            }
            if (Optional.IsDefined(Remorque))
            {
                writer.WritePropertyName("Remorque");
                writer.WriteObjectValue(Remorque);
            }
            if (Optional.IsDefined(CurrentStatus))
            {
                writer.WritePropertyName("CurrentStatus");
                writer.WriteObjectValue(CurrentStatus);
            }
            if (Optional.IsDefined(CurrentStatusId))
            {
                writer.WritePropertyName("CurrentStatus_Id");
                writer.WriteStringValue(CurrentStatusId);
            }
            if (Optional.IsDefined(CurrentWorkflowStep))
            {
                writer.WritePropertyName("CurrentWorkflowStep");
                writer.WriteNumberValue(CurrentWorkflowStep.Value);
            }
            if (Optional.IsDefined(AutreAgenceArrivee))
            {
                writer.WritePropertyName("AutreAgenceArrivee");
                writer.WriteStringValue(AutreAgenceArrivee);
            }
            if (Optional.IsCollectionDefined(Pictures))
            {
                writer.WritePropertyName("Pictures");
                writer.WriteStartArray();
                foreach (var item in Pictures)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("Id");
            writer.WriteStringValue(Id);
            writer.WritePropertyName("CreationDate");
            writer.WriteStringValue(CreationDate, "O");
            writer.WriteEndObject();
        }

        internal static DeclarationDoublePlancher DeserializeDeclarationDoublePlancher(JsonElement element)
        {
            Optional<bool> isDPUsed = default;
            Optional<IList<MotifDP>> motifDps = default;
            Optional<string> autreMotifDP = default;
            Optional<int> nbDPCassées = default;
            Optional<bool> isCr = default;
            Optional<Traction> traction = default;
            Optional<string> tractionId = default;
            Optional<Remorque> remorque = default;
            Optional<RemorqueStatus> currentStatus = default;
            Optional<string> currentStatusId = default;
            Optional<int> currentWorkflowStep = default;
            Optional<string> autreAgenceArrivee = default;
            Optional<IList<Picture>> pictures = default;
            string id = default;
            DateTimeOffset creationDate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("IsDPUsed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDPUsed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("MotifDps"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MotifDP> array = new List<MotifDP>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MotifDP.DeserializeMotifDP(item));
                    }
                    motifDps = array;
                    continue;
                }
                if (property.NameEquals("AutreMotifDP"))
                {
                    autreMotifDP = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("NbDPCassées"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    nbDPCassées = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("IsCr"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isCr = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("Traction"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    traction = Traction.DeserializeTraction(property.Value);
                    continue;
                }
                if (property.NameEquals("Traction_Id"))
                {
                    tractionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Remorque"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    remorque = Remorque.DeserializeRemorque(property.Value);
                    continue;
                }
                if (property.NameEquals("CurrentStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    currentStatus = RemorqueStatus.DeserializeRemorqueStatus(property.Value);
                    continue;
                }
                if (property.NameEquals("CurrentStatus_Id"))
                {
                    currentStatusId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("CurrentWorkflowStep"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    currentWorkflowStep = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("AutreAgenceArrivee"))
                {
                    autreAgenceArrivee = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Pictures"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Picture> array = new List<Picture>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Picture.DeserializePicture(item));
                    }
                    pictures = array;
                    continue;
                }
                if (property.NameEquals("Id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("CreationDate"))
                {
                    creationDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new DeclarationDoublePlancher(Optional.ToNullable(isDPUsed), Optional.ToList(motifDps), autreMotifDP.Value, Optional.ToNullable(nbDPCassées), Optional.ToNullable(isCr), traction.Value, tractionId.Value, remorque.Value, currentStatus.Value, currentStatusId.Value, Optional.ToNullable(currentWorkflowStep), autreAgenceArrivee.Value, Optional.ToList(pictures), id, creationDate);
        }
    }
}
