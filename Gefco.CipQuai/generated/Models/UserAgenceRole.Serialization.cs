// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Gefco.CipQuai.ApiClient.Models
{
    public partial class UserAgenceRole : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("Id");
                writer.WriteStringValue(Id);
            }
            if (Optional.IsDefined(UserId))
            {
                writer.WritePropertyName("User_Id");
                writer.WriteStringValue(UserId);
            }
            if (Optional.IsDefined(AgenceRoleId))
            {
                writer.WritePropertyName("AgenceRole_Id");
                writer.WriteNumberValue(AgenceRoleId.Value);
            }
            if (Optional.IsDefined(AgenceId))
            {
                writer.WritePropertyName("Agence_Id");
                writer.WriteStringValue(AgenceId);
            }
            if (Optional.IsDefined(User))
            {
                writer.WritePropertyName("User");
                writer.WriteObjectValue(User);
            }
            if (Optional.IsDefined(AgenceRole))
            {
                writer.WritePropertyName("AgenceRole");
                writer.WriteObjectValue(AgenceRole);
            }
            if (Optional.IsDefined(Agence))
            {
                writer.WritePropertyName("Agence");
                writer.WriteObjectValue(Agence);
            }
            writer.WriteEndObject();
        }

        internal static UserAgenceRole DeserializeUserAgenceRole(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> userId = default;
            Optional<int> agenceRoleId = default;
            Optional<string> agenceId = default;
            Optional<ApplicationUser> user = default;
            Optional<AgenceRole> agenceRole = default;
            Optional<Agence> agence = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("Id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("User_Id"))
                {
                    userId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("AgenceRole_Id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    agenceRoleId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("Agence_Id"))
                {
                    agenceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("User"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    user = ApplicationUser.DeserializeApplicationUser(property.Value);
                    continue;
                }
                if (property.NameEquals("AgenceRole"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    agenceRole = AgenceRole.DeserializeAgenceRole(property.Value);
                    continue;
                }
                if (property.NameEquals("Agence"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    agence = Agence.DeserializeAgence(property.Value);
                    continue;
                }
            }
            return new UserAgenceRole(id.Value, userId.Value, Optional.ToNullable(agenceRoleId), agenceId.Value, user.Value, agenceRole.Value, agence.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "UserAgenceRole");
            if (Optional.IsDefined(Id))
            {
                writer.WriteStartElement("Id");
                writer.WriteValue(Id);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(UserId))
            {
                writer.WriteStartElement("User_Id");
                writer.WriteValue(UserId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(AgenceRoleId))
            {
                writer.WriteStartElement("AgenceRole_Id");
                writer.WriteValue(AgenceRoleId.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(AgenceId))
            {
                writer.WriteStartElement("Agence_Id");
                writer.WriteValue(AgenceId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(User))
            {
                writer.WriteObjectValue(User, "User");
            }
            if (Optional.IsDefined(AgenceRole))
            {
                writer.WriteObjectValue(AgenceRole, "AgenceRole");
            }
            if (Optional.IsDefined(Agence))
            {
                writer.WriteObjectValue(Agence, "Agence");
            }
            writer.WriteEndElement();
        }

        internal static UserAgenceRole DeserializeUserAgenceRole(XElement element)
        {
            string id = default;
            string userId = default;
            int? agenceRoleId = default;
            string agenceId = default;
            ApplicationUser user = default;
            AgenceRole agenceRole = default;
            Agence agence = default;
            if (element.Element("Id") is XElement idElement)
            {
                id = (string)idElement;
            }
            if (element.Element("User_Id") is XElement userIdElement)
            {
                userId = (string)userIdElement;
            }
            if (element.Element("AgenceRole_Id") is XElement agenceRoleIdElement)
            {
                agenceRoleId = (int?)agenceRoleIdElement;
            }
            if (element.Element("Agence_Id") is XElement agenceIdElement)
            {
                agenceId = (string)agenceIdElement;
            }
            if (element.Element("User") is XElement userElement)
            {
                user = ApplicationUser.DeserializeApplicationUser(userElement);
            }
            if (element.Element("AgenceRole") is XElement agenceRoleElement)
            {
                agenceRole = AgenceRole.DeserializeAgenceRole(agenceRoleElement);
            }
            if (element.Element("Agence") is XElement agenceElement)
            {
                agence = Agence.DeserializeAgence(agenceElement);
            }
            return new UserAgenceRole(id, userId, agenceRoleId, agenceId, user, agenceRole, agence);
        }
    }
}
