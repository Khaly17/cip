// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Gefco.CipQuai.ApiClient.Models
{
    public partial class Resource : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("Description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Key))
            {
                writer.WritePropertyName("Key");
                writer.WriteStringValue(Key);
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("Value");
                writer.WriteStringValue(Value);
            }
            if (Optional.IsDefined(Type))
            {
                writer.WritePropertyName("Type");
                writer.WriteStringValue(Type.Value.ToString());
            }
            if (Optional.IsDefined(ValueAsBytes))
            {
                writer.WritePropertyName("ValueAsBytes");
                writer.WriteBase64StringValue(ValueAsBytes, "D");
            }
            writer.WritePropertyName("Id");
            writer.WriteStringValue(Id);
            writer.WritePropertyName("CreationDate");
            writer.WriteStringValue(CreationDate, "O");
            writer.WriteEndObject();
        }

        internal static Resource DeserializeResource(JsonElement element)
        {
            Optional<string> description = default;
            Optional<string> key = default;
            Optional<string> value = default;
            Optional<Enum1> type = default;
            Optional<byte[]> valueAsBytes = default;
            string id = default;
            DateTimeOffset creationDate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("Description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Key"))
                {
                    key = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Value"))
                {
                    value = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Type"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    type = new Enum1(property.Value.GetInt32());
                    continue;
                }
                if (property.NameEquals("ValueAsBytes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    valueAsBytes = property.Value.GetBytesFromBase64("D");
                    continue;
                }
                if (property.NameEquals("Id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("CreationDate"))
                {
                    creationDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new Resource(description.Value, key.Value, value.Value, Optional.ToNullable(type), valueAsBytes.Value, id, creationDate);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "Resource");
            if (Optional.IsDefined(Description))
            {
                writer.WriteStartElement("Description");
                writer.WriteValue(Description);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Key))
            {
                writer.WriteStartElement("Key");
                writer.WriteValue(Key);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Value))
            {
                writer.WriteStartElement("Value");
                writer.WriteValue(Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Type))
            {
                writer.WriteStartElement("Type");
                writer.WriteValue(Type.Value.ToString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ValueAsBytes))
            {
                writer.WriteStartElement("ValueAsBytes");
                writer.WriteValue(ValueAsBytes, "D");
                writer.WriteEndElement();
            }
            writer.WriteStartElement("Id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("CreationDate");
            writer.WriteValue(CreationDate, "O");
            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        internal static Resource DeserializeResource(XElement element)
        {
            string description = default;
            string key = default;
            string value = default;
            Enum1? type = default;
            byte[] valueAsBytes = default;
            string id = default;
            DateTimeOffset creationDate = default;
            if (element.Element("Description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            if (element.Element("Key") is XElement keyElement)
            {
                key = (string)keyElement;
            }
            if (element.Element("Value") is XElement valueElement)
            {
                value = (string)valueElement;
            }
            if (element.Element("Type") is XElement typeElement)
            {
                type = new Enum1(typeElement.Value);
            }
            if (element.Element("ValueAsBytes") is XElement valueAsBytesElement)
            {
                valueAsBytes = valueAsBytesElement.GetBytesFromBase64Value("D");
            }
            if (element.Element("Id") is XElement idElement)
            {
                id = (string)idElement;
            }
            if (element.Element("CreationDate") is XElement creationDateElement)
            {
                creationDate = creationDateElement.GetDateTimeOffsetValue("O");
            }
            return new Resource(description, key, value, type, valueAsBytes, id, creationDate);
        }
    }
}
