// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Gefco.CipQuai.ApiClient.Models;

namespace Gefco.CipQuai.ApiClient
{
    internal partial class AccountRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of AccountRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public AccountRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            this.endpoint = endpoint ?? new Uri("http://localhost/CipQuai");
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateLoginRequest(string appVersion, string userName, string password)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/Account/Login", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("userName", userName, true);
            uri.AppendQuery("password", password, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userName"> The String to use. </param>
        /// <param name="password"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="userName"/>, or <paramref name="password"/> is null. </exception>
        public async Task<Response<ApplicationUser>> LoginAsync(string appVersion, string userName, string password, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userName == null)
            {
                throw new ArgumentNullException(nameof(userName));
            }
            if (password == null)
            {
                throw new ArgumentNullException(nameof(password));
            }

            using var message = CreateLoginRequest(appVersion, userName, password);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApplicationUser value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApplicationUser.DeserializeApplicationUser(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userName"> The String to use. </param>
        /// <param name="password"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="userName"/>, or <paramref name="password"/> is null. </exception>
        public Response<ApplicationUser> Login(string appVersion, string userName, string password, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userName == null)
            {
                throw new ArgumentNullException(nameof(userName));
            }
            if (password == null)
            {
                throw new ArgumentNullException(nameof(password));
            }

            using var message = CreateLoginRequest(appVersion, userName, password);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApplicationUser value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApplicationUser.DeserializeApplicationUser(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateChangePasswordRequest(string appVersion, string userId, string oldPassword, string newPassword)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/Account/ChangePassword", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("userId", userId, true);
            uri.AppendQuery("oldPassword", oldPassword, true);
            uri.AppendQuery("newPassword", newPassword, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="oldPassword"> The String to use. </param>
        /// <param name="newPassword"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="userId"/>, <paramref name="oldPassword"/>, or <paramref name="newPassword"/> is null. </exception>
        public async Task<Response<object>> ChangePasswordAsync(string appVersion, string userId, string oldPassword, string newPassword, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (oldPassword == null)
            {
                throw new ArgumentNullException(nameof(oldPassword));
            }
            if (newPassword == null)
            {
                throw new ArgumentNullException(nameof(newPassword));
            }

            using var message = CreateChangePasswordRequest(appVersion, userId, oldPassword, newPassword);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        object value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = document.RootElement.GetObject();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="oldPassword"> The String to use. </param>
        /// <param name="newPassword"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="userId"/>, <paramref name="oldPassword"/>, or <paramref name="newPassword"/> is null. </exception>
        public Response<object> ChangePassword(string appVersion, string userId, string oldPassword, string newPassword, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (oldPassword == null)
            {
                throw new ArgumentNullException(nameof(oldPassword));
            }
            if (newPassword == null)
            {
                throw new ArgumentNullException(nameof(newPassword));
            }

            using var message = CreateChangePasswordRequest(appVersion, userId, oldPassword, newPassword);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        object value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = document.RootElement.GetObject();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateForgotPasswordRequest(string appVersion, string email)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/Account/ForgotPassword", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("email", email, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="email"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="email"/> is null. </exception>
        public async Task<Response<object>> ForgotPasswordAsync(string appVersion, string email, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (email == null)
            {
                throw new ArgumentNullException(nameof(email));
            }

            using var message = CreateForgotPasswordRequest(appVersion, email);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        object value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = document.RootElement.GetObject();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="email"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="email"/> is null. </exception>
        public Response<object> ForgotPassword(string appVersion, string email, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (email == null)
            {
                throw new ArgumentNullException(nameof(email));
            }

            using var message = CreateForgotPasswordRequest(appVersion, email);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        object value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = document.RootElement.GetObject();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRegisterRequest(string appVersion, string fgu, string password, string firstName, string lastName, string phoneNumber)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/Account/Register", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("fgu", fgu, true);
            uri.AppendQuery("password", password, true);
            uri.AppendQuery("firstName", firstName, true);
            uri.AppendQuery("lastName", lastName, true);
            uri.AppendQuery("phoneNumber", phoneNumber, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="fgu"> The String to use. </param>
        /// <param name="password"> The String to use. </param>
        /// <param name="firstName"> The String to use. </param>
        /// <param name="lastName"> The String to use. </param>
        /// <param name="phoneNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="fgu"/>, <paramref name="password"/>, <paramref name="firstName"/>, <paramref name="lastName"/>, or <paramref name="phoneNumber"/> is null. </exception>
        public async Task<Response<UserServiceResult>> RegisterAsync(string appVersion, string fgu, string password, string firstName, string lastName, string phoneNumber, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (fgu == null)
            {
                throw new ArgumentNullException(nameof(fgu));
            }
            if (password == null)
            {
                throw new ArgumentNullException(nameof(password));
            }
            if (firstName == null)
            {
                throw new ArgumentNullException(nameof(firstName));
            }
            if (lastName == null)
            {
                throw new ArgumentNullException(nameof(lastName));
            }
            if (phoneNumber == null)
            {
                throw new ArgumentNullException(nameof(phoneNumber));
            }

            using var message = CreateRegisterRequest(appVersion, fgu, password, firstName, lastName, phoneNumber);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UserServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = UserServiceResult.DeserializeUserServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="fgu"> The String to use. </param>
        /// <param name="password"> The String to use. </param>
        /// <param name="firstName"> The String to use. </param>
        /// <param name="lastName"> The String to use. </param>
        /// <param name="phoneNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="fgu"/>, <paramref name="password"/>, <paramref name="firstName"/>, <paramref name="lastName"/>, or <paramref name="phoneNumber"/> is null. </exception>
        public Response<UserServiceResult> Register(string appVersion, string fgu, string password, string firstName, string lastName, string phoneNumber, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (fgu == null)
            {
                throw new ArgumentNullException(nameof(fgu));
            }
            if (password == null)
            {
                throw new ArgumentNullException(nameof(password));
            }
            if (firstName == null)
            {
                throw new ArgumentNullException(nameof(firstName));
            }
            if (lastName == null)
            {
                throw new ArgumentNullException(nameof(lastName));
            }
            if (phoneNumber == null)
            {
                throw new ArgumentNullException(nameof(phoneNumber));
            }

            using var message = CreateRegisterRequest(appVersion, fgu, password, firstName, lastName, phoneNumber);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UserServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = UserServiceResult.DeserializeUserServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRegisterSeedRequest(string fgu, string password, string firstName, string lastName, string phoneNumber, string email)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/Account/RegisterSeed", false);
            uri.AppendQuery("fgu", fgu, true);
            uri.AppendQuery("password", password, true);
            uri.AppendQuery("firstName", firstName, true);
            uri.AppendQuery("lastName", lastName, true);
            uri.AppendQuery("phoneNumber", phoneNumber, true);
            uri.AppendQuery("email", email, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <param name="fgu"> The String to use. </param>
        /// <param name="password"> The String to use. </param>
        /// <param name="firstName"> The String to use. </param>
        /// <param name="lastName"> The String to use. </param>
        /// <param name="phoneNumber"> The String to use. </param>
        /// <param name="email"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fgu"/>, <paramref name="password"/>, <paramref name="firstName"/>, <paramref name="lastName"/>, <paramref name="phoneNumber"/>, or <paramref name="email"/> is null. </exception>
        public async Task<Response<UserServiceResult>> RegisterSeedAsync(string fgu, string password, string firstName, string lastName, string phoneNumber, string email, CancellationToken cancellationToken = default)
        {
            if (fgu == null)
            {
                throw new ArgumentNullException(nameof(fgu));
            }
            if (password == null)
            {
                throw new ArgumentNullException(nameof(password));
            }
            if (firstName == null)
            {
                throw new ArgumentNullException(nameof(firstName));
            }
            if (lastName == null)
            {
                throw new ArgumentNullException(nameof(lastName));
            }
            if (phoneNumber == null)
            {
                throw new ArgumentNullException(nameof(phoneNumber));
            }
            if (email == null)
            {
                throw new ArgumentNullException(nameof(email));
            }

            using var message = CreateRegisterSeedRequest(fgu, password, firstName, lastName, phoneNumber, email);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UserServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = UserServiceResult.DeserializeUserServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="fgu"> The String to use. </param>
        /// <param name="password"> The String to use. </param>
        /// <param name="firstName"> The String to use. </param>
        /// <param name="lastName"> The String to use. </param>
        /// <param name="phoneNumber"> The String to use. </param>
        /// <param name="email"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fgu"/>, <paramref name="password"/>, <paramref name="firstName"/>, <paramref name="lastName"/>, <paramref name="phoneNumber"/>, or <paramref name="email"/> is null. </exception>
        public Response<UserServiceResult> RegisterSeed(string fgu, string password, string firstName, string lastName, string phoneNumber, string email, CancellationToken cancellationToken = default)
        {
            if (fgu == null)
            {
                throw new ArgumentNullException(nameof(fgu));
            }
            if (password == null)
            {
                throw new ArgumentNullException(nameof(password));
            }
            if (firstName == null)
            {
                throw new ArgumentNullException(nameof(firstName));
            }
            if (lastName == null)
            {
                throw new ArgumentNullException(nameof(lastName));
            }
            if (phoneNumber == null)
            {
                throw new ArgumentNullException(nameof(phoneNumber));
            }
            if (email == null)
            {
                throw new ArgumentNullException(nameof(email));
            }

            using var message = CreateRegisterSeedRequest(fgu, password, firstName, lastName, phoneNumber, email);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UserServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = UserServiceResult.DeserializeUserServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSeedMeRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/Account/SeedMe", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<string>> SeedMeAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateSeedMeRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        string value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = document.RootElement.GetString();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<string> SeedMe(CancellationToken cancellationToken = default)
        {
            using var message = CreateSeedMeRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        string value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = document.RootElement.GetString();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRequest(string appVersion, string userId, string email, string firstName, string lastName, string phoneNumber)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/Account/Update", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("userId", userId, true);
            uri.AppendQuery("email", email, true);
            uri.AppendQuery("firstName", firstName, true);
            uri.AppendQuery("lastName", lastName, true);
            uri.AppendQuery("phoneNumber", phoneNumber, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="email"> The String to use. </param>
        /// <param name="firstName"> The String to use. </param>
        /// <param name="lastName"> The String to use. </param>
        /// <param name="phoneNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="userId"/>, <paramref name="email"/>, <paramref name="firstName"/>, <paramref name="lastName"/>, or <paramref name="phoneNumber"/> is null. </exception>
        public async Task<Response<UserServiceResult>> UpdateAsync(string appVersion, string userId, string email, string firstName, string lastName, string phoneNumber, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (email == null)
            {
                throw new ArgumentNullException(nameof(email));
            }
            if (firstName == null)
            {
                throw new ArgumentNullException(nameof(firstName));
            }
            if (lastName == null)
            {
                throw new ArgumentNullException(nameof(lastName));
            }
            if (phoneNumber == null)
            {
                throw new ArgumentNullException(nameof(phoneNumber));
            }

            using var message = CreateUpdateRequest(appVersion, userId, email, firstName, lastName, phoneNumber);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UserServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = UserServiceResult.DeserializeUserServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="email"> The String to use. </param>
        /// <param name="firstName"> The String to use. </param>
        /// <param name="lastName"> The String to use. </param>
        /// <param name="phoneNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="userId"/>, <paramref name="email"/>, <paramref name="firstName"/>, <paramref name="lastName"/>, or <paramref name="phoneNumber"/> is null. </exception>
        public Response<UserServiceResult> Update(string appVersion, string userId, string email, string firstName, string lastName, string phoneNumber, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (email == null)
            {
                throw new ArgumentNullException(nameof(email));
            }
            if (firstName == null)
            {
                throw new ArgumentNullException(nameof(firstName));
            }
            if (lastName == null)
            {
                throw new ArgumentNullException(nameof(lastName));
            }
            if (phoneNumber == null)
            {
                throw new ArgumentNullException(nameof(phoneNumber));
            }

            using var message = CreateUpdateRequest(appVersion, userId, email, firstName, lastName, phoneNumber);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UserServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = UserServiceResult.DeserializeUserServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSetDeviceRequest(string appVersion, string userId, Enum2 deviceType, string deviceToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/Account/SetDevice", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("userId", userId, true);
            uri.AppendQuery("deviceType", deviceType.ToString(), true);
            uri.AppendQuery("deviceToken", deviceToken, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="deviceType"> The Enum2 to use. </param>
        /// <param name="deviceToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="userId"/>, or <paramref name="deviceToken"/> is null. </exception>
        public async Task<Response<BooleanServiceResult>> SetDeviceAsync(string appVersion, string userId, Enum2 deviceType, string deviceToken, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (deviceToken == null)
            {
                throw new ArgumentNullException(nameof(deviceToken));
            }

            using var message = CreateSetDeviceRequest(appVersion, userId, deviceType, deviceToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BooleanServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = BooleanServiceResult.DeserializeBooleanServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="deviceType"> The Enum2 to use. </param>
        /// <param name="deviceToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="userId"/>, or <paramref name="deviceToken"/> is null. </exception>
        public Response<BooleanServiceResult> SetDevice(string appVersion, string userId, Enum2 deviceType, string deviceToken, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (deviceToken == null)
            {
                throw new ArgumentNullException(nameof(deviceToken));
            }

            using var message = CreateSetDeviceRequest(appVersion, userId, deviceType, deviceToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BooleanServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = BooleanServiceResult.DeserializeBooleanServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateHasVersionRequest(string appVersion, string userId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/Account/HasVersion", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("userId", userId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="userId"/> is null. </exception>
        public async Task<Response<BooleanServiceResult>> HasVersionAsync(string appVersion, string userId, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateHasVersionRequest(appVersion, userId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BooleanServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = BooleanServiceResult.DeserializeBooleanServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="userId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/> or <paramref name="userId"/> is null. </exception>
        public Response<BooleanServiceResult> HasVersion(string appVersion, string userId, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateHasVersionRequest(appVersion, userId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BooleanServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = BooleanServiceResult.DeserializeBooleanServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUploadProfilePictureRequest(string appVersion, string id, string fileName, Stream file)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/Account/UploadProfilePicture", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("id", id, true);
            uri.AppendQuery("fileName", fileName, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            request.Headers.Add("Content-Type", "application/x-www-form-urlencoded");
            var content = new FormUrlEncodedContent();
            content.Add("File", file.ToString());
            request.Content = content;
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="id"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="file"> Upload picture. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="id"/>, <paramref name="fileName"/>, or <paramref name="file"/> is null. </exception>
        public async Task<Response<PictureServiceResult>> UploadProfilePictureAsync(string appVersion, string id, string fileName, Stream file, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (fileName == null)
            {
                throw new ArgumentNullException(nameof(fileName));
            }
            if (file == null)
            {
                throw new ArgumentNullException(nameof(file));
            }

            using var message = CreateUploadProfilePictureRequest(appVersion, id, fileName, file);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PictureServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PictureServiceResult.DeserializePictureServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="id"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="file"> Upload picture. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="id"/>, <paramref name="fileName"/>, or <paramref name="file"/> is null. </exception>
        public Response<PictureServiceResult> UploadProfilePicture(string appVersion, string id, string fileName, Stream file, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (fileName == null)
            {
                throw new ArgumentNullException(nameof(fileName));
            }
            if (file == null)
            {
                throw new ArgumentNullException(nameof(file));
            }

            using var message = CreateUploadProfilePictureRequest(appVersion, id, fileName, file);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PictureServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PictureServiceResult.DeserializePictureServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUploadProfilePicRequest(string appVersion, string id, string fileName, string fileContent)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/Account/UploadProfilePic", false);
            uri.AppendQuery("appVersion", appVersion, true);
            uri.AppendQuery("id", id, true);
            uri.AppendQuery("fileName", fileName, true);
            uri.AppendQuery("fileContent", fileContent, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="id"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="fileContent"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="id"/>, <paramref name="fileName"/>, or <paramref name="fileContent"/> is null. </exception>
        public async Task<Response<PictureServiceResult>> UploadProfilePicAsync(string appVersion, string id, string fileName, string fileContent, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (fileName == null)
            {
                throw new ArgumentNullException(nameof(fileName));
            }
            if (fileContent == null)
            {
                throw new ArgumentNullException(nameof(fileContent));
            }

            using var message = CreateUploadProfilePicRequest(appVersion, id, fileName, fileContent);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PictureServiceResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PictureServiceResult.DeserializePictureServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="appVersion"> The String to use. </param>
        /// <param name="id"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="fileContent"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appVersion"/>, <paramref name="id"/>, <paramref name="fileName"/>, or <paramref name="fileContent"/> is null. </exception>
        public Response<PictureServiceResult> UploadProfilePic(string appVersion, string id, string fileName, string fileContent, CancellationToken cancellationToken = default)
        {
            if (appVersion == null)
            {
                throw new ArgumentNullException(nameof(appVersion));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (fileName == null)
            {
                throw new ArgumentNullException(nameof(fileName));
            }
            if (fileContent == null)
            {
                throw new ArgumentNullException(nameof(fileContent));
            }

            using var message = CreateUploadProfilePicRequest(appVersion, id, fileName, fileContent);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PictureServiceResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PictureServiceResult.DeserializePictureServiceResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
